//
// +-------------------------------------------------------------------------+
// |      This file was generated by The Interactive Disassembler (IDA)      |
// |           Copyright (c) 2020 Hex-Rays, <support@hex-rays.com>           |
// +-------------------------------------------------------------------------+
//
//
//      This file should be used in the following way:
//         - reload executable into IDA with using switch -c
//         - use File, Load IDC file and load this file.
//
//      NOTE: This file doesn't contain all information from the database.
//

#define UNLOADED_FILE   1
#include <idc.idc>

static main(void)
{
        // set 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, INFFL_LOADIDC|get_inf_attr(INF_GENFLAGS));
        GenInfo();            // various settings
        Segments();           // segmentation
        Enums();              // enumerations
        Structures();         // structure types
        ApplyStrucTInfos();   // structure type infos
        Patches();            // manual patches
        SegRegs();            // segment register values
        Bytes();              // individual bytes (code,data)
        Functions();          // function definitions
        // clear 'loading idc file' mode
        set_inf_attr(INF_GENFLAGS, ~INFFL_LOADIDC&get_inf_attr(INF_GENFLAGS));
}

//------------------------------------------------------------------------
// General information

static GenInfo(void) {

        delete_all_segments();    // purge database
	set_processor_type("metapc", SETPROC_USER);
	set_inf_attr(INF_COMPILER, 1);
	set_inf_attr(INF_STRLIT_BREAK, 0xA);
	set_flag(INF_CMTFLAG, SW_ALLCMT, 0);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_VOID, 0);
	set_inf_attr(INF_XREFNUM, 2);
	set_flag(INF_OUTFLAGS, OFLG_SHOW_AUTO, 1);
	set_inf_attr(INF_INDENT, 16);
	set_inf_attr(INF_COMMENT, 40);
	set_inf_attr(INF_MAXREF, 0x10);
	add_default_til("mssdk_win7");
}

//------------------------------------------------------------------------
// Information about segmentation

static Segments(void) {
	set_selector(0X1,0);
	set_selector(0X2,0);
	set_selector(0X3,0);
	set_selector(0X4,0);

	add_segm_ex(0X401000,0X404000,0X1,1,3,2,ADDSEG_NOSREG);
	SegRename(0X401000,".text");
	SegClass (0X401000,"CODE");
	SegDefReg(0x401000,"es",0x0);
	SegDefReg(0x401000,"ss",0x0);
	SegDefReg(0x401000,"ds",0x3);
	set_segm_type(0X401000,2);
	add_segm_ex(0X404000,0X404030,0X4,1,3,2,ADDSEG_NOSREG);
	SegRename(0X404000,".idata");
	SegClass (0X404000,"DATA");
	SegDefReg(0x404000,"es",0x0);
	SegDefReg(0x404000,"ss",0x0);
	SegDefReg(0x404000,"ds",0x3);
	set_segm_type(0X404000,1);
	add_segm_ex(0X404030,0X405000,0X2,1,3,2,ADDSEG_NOSREG);
	SegRename(0X404030,".rdata");
	SegClass (0X404030,"DATA");
	SegDefReg(0x404030,"es",0x0);
	SegDefReg(0x404030,"ss",0x0);
	SegDefReg(0x404030,"ds",0x3);
	set_segm_type(0X404030,3);
	add_segm_ex(0X405000,0X406000,0X3,1,3,2,ADDSEG_NOSREG);
	SegRename(0X405000,".data");
	SegClass (0X405000,"DATA");
	SegDefReg(0x405000,"es",0x0);
	SegDefReg(0x405000,"ss",0x0);
	SegDefReg(0x405000,"ds",0x3);
	set_segm_type(0X405000,3);
	set_inf_attr(INF_LOW_OFF, 0x401000);
	set_inf_attr(INF_HIGH_OFF, 0x406000);
}

//------------------------------------------------------------------------
// Information about enum types

static Enums(void) {
        auto id;
        begin_type_updating(UTP_ENUM);
        end_type_updating(UTP_ENUM);
}

static ApplyStrucTInfos_0(void) {
        auto id;
	id = get_struc_id("_LUID");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "LONG");
	id = get_struc_id("_TOKEN_PRIVILEGES");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "LUID_AND_ATTRIBUTES[1]");
	id = get_struc_id("LUID_AND_ATTRIBUTES");
	SetType(get_member_id(id, 0x0), "LUID");
	SetType(get_member_id(id, 0x8), "DWORD");
	id = get_struc_id("LUID");
	SetType(get_member_id(id, 0x0), "DWORD");
	SetType(get_member_id(id, 0x4), "LONG");
	id = get_struc_id("InjectParam");
	SetType(get_member_id(id, 0x0), "struct api_table *");
	SetType(get_member_id(id, 0x4), "struct FnTable *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "char **");
	SetType(get_member_id(id, 0x10), "char **");
	id = get_struc_id("FnTable");
	SetType(get_member_id(id, 0x0), "void *");
	SetType(get_member_id(id, 0x4), "void *");
	SetType(get_member_id(id, 0x8), "void *");
	SetType(get_member_id(id, 0xC), "void *");
	SetType(get_member_id(id, 0x10), "void *");
	id = get_struc_id("api_table");
	SetType(get_member_id(id, 0x0), "int");
	SetType(get_member_id(id, 0x4), "int");
	SetType(get_member_id(id, 0x8), "int");
	SetType(get_member_id(id, 0xC), "int");
	SetType(get_member_id(id, 0x10), "int");
	SetType(get_member_id(id, 0x14), "int");
	SetType(get_member_id(id, 0x18), "int");
	SetType(get_member_id(id, 0x1C), "int");
	SetType(get_member_id(id, 0x20), "int");
	SetType(get_member_id(id, 0x24), "int");
	SetType(get_member_id(id, 0x28), "int");
	SetType(get_member_id(id, 0x2C), "int");
	SetType(get_member_id(id, 0x30), "int");
	SetType(get_member_id(id, 0x34), "int");
	SetType(get_member_id(id, 0x38), "int");
	SetType(get_member_id(id, 0x3C), "int");
	SetType(get_member_id(id, 0x40), "int");
	SetType(get_member_id(id, 0x44), "int");
	SetType(get_member_id(id, 0x48), "int");
	SetType(get_member_id(id, 0x4C), "int");
	SetType(get_member_id(id, 0x50), "int");
	SetType(get_member_id(id, 0x54), "int");
	SetType(get_member_id(id, 0x58), "int");
	SetType(get_member_id(id, 0x5C), "int");
	SetType(get_member_id(id, 0x60), "int");
	SetType(get_member_id(id, 0x64), "int");
	SetType(get_member_id(id, 0x68), "int");
	SetType(get_member_id(id, 0x6C), "int");
	SetType(get_member_id(id, 0x70), "int");
	SetType(get_member_id(id, 0x74), "int");
	SetType(get_member_id(id, 0x78), "int");
	SetType(get_member_id(id, 0x7C), "int");
	SetType(get_member_id(id, 0x80), "int");
	SetType(get_member_id(id, 0x84), "int");
	SetType(get_member_id(id, 0x88), "int");
	SetType(get_member_id(id, 0x8C), "int");
	SetType(get_member_id(id, 0x90), "int");
	SetType(get_member_id(id, 0x94), "int");
	SetType(get_member_id(id, 0x98), "int");
	SetType(get_member_id(id, 0x9C), "int");
	SetType(get_member_id(id, 0xA0), "int");
	SetType(get_member_id(id, 0xA4), "int");
	SetType(get_member_id(id, 0xA8), "int");
	SetType(get_member_id(id, 0xAC), "int");
	SetType(get_member_id(id, 0xB0), "int");
	SetType(get_member_id(id, 0xB4), "struct FnTable");
	SetType(get_member_id(id, 0xC8), "HMODULE");
	SetType(get_member_id(id, 0xCC), "int");
	SetType(get_member_id(id, 0xD0), "char[4]");
	SetType(get_member_id(id, 0xD4), "int");
	SetType(get_member_id(id, 0xD8), "int");
	SetType(get_member_id(id, 0xDC), "int");
	SetType(get_member_id(id, 0xE0), "HMODULE");
	SetType(get_member_id(id, 0xE4), "HMODULE");
	return id;
}

//------------------------------------------------------------------------
// Information about type information for structure members

static ApplyStrucTInfos() {
	ApplyStrucTInfos_0();
}

static Structures_0(id) {
        auto mid;

	id = add_struc(-1,"_LUID",0);
	id = add_struc(-1,"_TOKEN_PRIVILEGES",0);
	id = add_struc(-1,"LUID_AND_ATTRIBUTES",0);
	id = add_struc(-1,"LUID",0);
	id = add_struc(-1,"InjectParam",0);
	id = add_struc(-1,"FnTable",0);
	id = add_struc(-1,"api_table",0);
	
	id = get_struc_id("_LUID");
	mid = add_struc_member(id,"LowPart",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"HighPart",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("LUID");
	mid = add_struc_member(id,"LowPart",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"HighPart",	0X4,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("LUID_AND_ATTRIBUTES");
	mid = add_struc_member(id,"Luid",	0,	0x60000400,	get_struc_id("LUID"),	8);
	mid = add_struc_member(id,"Attributes",	0X8,	0x20000400,	-1,	4);
	set_struc_align(id,2);
	
	id = get_struc_id("_TOKEN_PRIVILEGES");
	mid = add_struc_member(id,"PrivilegeCount",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Privileges",	0X4,	0x60000400,	get_struc_id("LUID_AND_ATTRIBUTES"),	12);
	set_struc_align(id,2);
	
	id = get_struc_id("InjectParam");
	mid = add_struc_member(id,"papi_table",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"pFnTable",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"p3",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"str1",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"str2",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("FnTable");
	mid = add_struc_member(id,"p1",	0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"p2",	0X4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"p3",	0X8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"p4",	0XC,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"p5",	0X10,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	
	id = get_struc_id("api_table");
	mid = add_struc_member(id,"WaitForSingleObject",	0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CreateMutexA",	0X4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CreateThread",	0X8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ExitThread",	0XC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"Sleep",	0X10,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GetTickCount",	0X14,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CreateFileA",	0X18,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"WriteFile",	0X1C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"var_C8",	0X20,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CreateProcessA",	0X24,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GetLogicalDriveStringsA",	0X28,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GetDriveTypeA",	0X2C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CreateDirectoryA",	0X30,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"GetLastError",	0X34,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"CopyFileA",	0X38,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"DeleteFileA",	0X3C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lstrlen",	0X40,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lstrcat",	0X44,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"var_A0",	0X48,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lstrcmpi",	0X4C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"lstrcpyn",	0X50,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"WSAStartup",	0X54,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"socket",	0X58,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"connect",	0X5C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"inet_addr",	0X60,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"htons",	0X64,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"send",	0X68,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"recv",	0X6C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"closesocket",	0X70,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"gethostbyname",	0X74,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"sendto",	0X78,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"WSASocketA",	0X7C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"htonl",	0X80,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"setsockopt",	0X84,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"InternetOpenA_",	0X88,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"InternetOpenUrlA",	0X8C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"InternetReadFile",	0X90,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"InternetCloseHandle",	0X94,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ShellExecuteA",	0X98,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegCloseKey",	0X9C,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegCloseKey_",	0XA0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegCreateKeyExA",	0XA4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegDeleteKeyA",	0XA8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"RegDeleteValueA",	0XAC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"var_38",	0XB0,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"var_fn_tbl",	0XB4,	0x60000400,	get_struc_id("FnTable"),	20);
	mid = add_struc_member(id,"ShellExecuteA_",	0XC8,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"var_1C",	0XCC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"var_18",	0XD0,	0x000400,	-1,	4);
	mid = add_struc_member(id,"VirtualAllocEx",	0XD4,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"var_10",	0XD8,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"ZwWriteVirtualMemory",	0XDC,	0x20000400,	-1,	4);
	mid = add_struc_member(id,"hModule",	0XE0,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	mid = add_struc_member(id,"InternetOpenA",	0XE4,	0x25500400,	0XFFFFFFFF,	4,	0XFFFFFFFF,	0,	0x000002);
	set_struc_align(id,2);
	return id;
}

//------------------------------------------------------------------------
// Information about structure types

static Structures(void) {
        auto id;
        begin_type_updating(UTP_STRUCT);
	id = Structures_0(id);
	patch_byte	(0X4053A4,	0X6B);
	patch_byte	(0X4053A5,	0X65);
	patch_byte	(0X4053A6,	0X72);
	patch_byte	(0X4053A7,	0X6E);
	patch_byte	(0X4053A8,	0X65);
	patch_byte	(0X4053A9,	0X6C);
	patch_byte	(0X4053AA,	0X33);
	patch_byte	(0X4053AB,	0X32);
	patch_byte	(0X4053AC,	0X2E);
	patch_byte	(0X4053AD,	0X64);
	patch_byte	(0X4053AE,	0X6C);
	patch_byte	(0X4053AF,	0X6C);
	patch_byte	(0X4053B4,	0X77);
	patch_byte	(0X4053B5,	0X73);
	patch_byte	(0X4053B6,	0X32);
	patch_byte	(0X4053B7,	0X5F);
	patch_byte	(0X4053B8,	0X33);
	patch_byte	(0X4053B9,	0X32);
	patch_byte	(0X4053BA,	0X2E);
	patch_byte	(0X4053BB,	0X64);
	patch_byte	(0X4053BC,	0X6C);
	patch_byte	(0X4053BD,	0X6C);
	patch_byte	(0X4053C0,	0X77);
	patch_byte	(0X4053C1,	0X69);
	patch_byte	(0X4053C2,	0X6E);
	patch_byte	(0X4053C3,	0X69);
	patch_byte	(0X4053C4,	0X6E);
	patch_byte	(0X4053C5,	0X65);
	patch_byte	(0X4053C6,	0X74);
	patch_byte	(0X4053C7,	0X2E);
	patch_byte	(0X4053C8,	0X64);
	patch_byte	(0X4053C9,	0X6C);
	patch_byte	(0X4053CA,	0X6C);
	patch_byte	(0X4053CC,	0X73);
	patch_byte	(0X4053CD,	0X68);
	patch_byte	(0X4053CE,	0X65);
	patch_byte	(0X4053CF,	0X6C);
	patch_byte	(0X4053D0,	0X6C);
	patch_byte	(0X4053D1,	0X33);
	patch_byte	(0X4053D2,	0X32);
	patch_byte	(0X4053D3,	0X2E);
	patch_byte	(0X4053D4,	0X64);
	patch_byte	(0X4053D5,	0X6C);
	patch_byte	(0X4053D6,	0X6C);
	patch_byte	(0X4053D8,	0X61);
	patch_byte	(0X4053D9,	0X64);
	patch_byte	(0X4053DA,	0X76);
	patch_byte	(0X4053DB,	0X61);
	patch_byte	(0X4053DC,	0X70);
	patch_byte	(0X4053DD,	0X69);
	patch_byte	(0X4053DE,	0X33);
	patch_byte	(0X4053DF,	0X32);
	patch_byte	(0X4053E0,	0X2E);
	patch_byte	(0X4053E1,	0X64);
	patch_byte	(0X4053E2,	0X6C);
	patch_byte	(0X4053E3,	0X6C);
	patch_byte	(0X4053E8,	0X43);
	patch_byte	(0X4053E9,	0X72);
	patch_byte	(0X4053EA,	0X65);
	patch_byte	(0X4053EB,	0X61);
	patch_byte	(0X4053EC,	0X74);
	patch_byte	(0X4053ED,	0X65);
	patch_byte	(0X4053EE,	0X54);
	patch_byte	(0X4053EF,	0X6F);
	patch_byte	(0X4053F0,	0X6F);
	patch_byte	(0X4053F1,	0X6C);
	patch_byte	(0X4053F2,	0X68);
	patch_byte	(0X4053F3,	0X65);
	patch_byte	(0X4053F4,	0X6C);
	patch_byte	(0X4053F5,	0X70);
	patch_byte	(0X4053F6,	0X33);
	patch_byte	(0X4053F7,	0X32);
	patch_byte	(0X4053F8,	0X53);
	patch_byte	(0X4053F9,	0X6E);
	patch_byte	(0X4053FA,	0X61);
	patch_byte	(0X4053FB,	0X70);
	patch_byte	(0X4053FC,	0X73);
	patch_byte	(0X4053FD,	0X68);
	patch_byte	(0X4053FE,	0X6F);
	patch_byte	(0X4053FF,	0X74);
	patch_byte	(0X405404,	0X50);
	patch_byte	(0X405405,	0X72);
	patch_byte	(0X405406,	0X6F);
	patch_byte	(0X405407,	0X63);
	patch_byte	(0X405408,	0X65);
	patch_byte	(0X405409,	0X73);
	patch_byte	(0X40540A,	0X73);
	patch_byte	(0X40540B,	0X33);
	patch_byte	(0X40540C,	0X32);
	patch_byte	(0X40540D,	0X46);
	patch_byte	(0X40540E,	0X69);
	patch_byte	(0X40540F,	0X72);
	patch_byte	(0X405410,	0X73);
	patch_byte	(0X405411,	0X74);
	patch_byte	(0X405414,	0X50);
	patch_byte	(0X405415,	0X72);
	patch_byte	(0X405416,	0X6F);
	patch_byte	(0X405417,	0X63);
	patch_byte	(0X405418,	0X65);
	patch_byte	(0X405419,	0X73);
	patch_byte	(0X40541A,	0X73);
	patch_byte	(0X40541B,	0X33);
	patch_byte	(0X40541C,	0X32);
	patch_byte	(0X40541D,	0X4E);
	patch_byte	(0X40541E,	0X65);
	patch_byte	(0X40541F,	0X78);
	patch_byte	(0X405420,	0X74);
	patch_byte	(0X405424,	0X4F);
	patch_byte	(0X405425,	0X70);
	patch_byte	(0X405426,	0X65);
	patch_byte	(0X405427,	0X6E);
	patch_byte	(0X405428,	0X50);
	patch_byte	(0X405429,	0X72);
	patch_byte	(0X40542A,	0X6F);
	patch_byte	(0X40542B,	0X63);
	patch_byte	(0X40542C,	0X65);
	patch_byte	(0X40542D,	0X73);
	patch_byte	(0X40542E,	0X73);
	patch_byte	(0X405430,	0X47);
	patch_byte	(0X405431,	0X65);
	patch_byte	(0X405432,	0X74);
	patch_byte	(0X405433,	0X4D);
	patch_byte	(0X405434,	0X6F);
	patch_byte	(0X405435,	0X64);
	patch_byte	(0X405436,	0X75);
	patch_byte	(0X405437,	0X6C);
	patch_byte	(0X405438,	0X65);
	patch_byte	(0X405439,	0X46);
	patch_byte	(0X40543A,	0X69);
	patch_byte	(0X40543B,	0X6C);
	patch_byte	(0X40543C,	0X65);
	patch_byte	(0X40543D,	0X4E);
	patch_byte	(0X40543E,	0X61);
	patch_byte	(0X40543F,	0X6D);
	patch_byte	(0X405440,	0X65);
	patch_byte	(0X405441,	0X41);
	patch_byte	(0X405444,	0X56);
	patch_byte	(0X405445,	0X69);
	patch_byte	(0X405446,	0X72);
	patch_byte	(0X405447,	0X74);
	patch_byte	(0X405448,	0X75);
	patch_byte	(0X405449,	0X61);
	patch_byte	(0X40544A,	0X6C);
	patch_byte	(0X40544B,	0X41);
	patch_byte	(0X40544C,	0X6C);
	patch_byte	(0X40544D,	0X6C);
	patch_byte	(0X40544E,	0X6F);
	patch_byte	(0X40544F,	0X63);
	patch_byte	(0X405450,	0X45);
	patch_byte	(0X405451,	0X78);
	patch_byte	(0X405454,	0X5A);
	patch_byte	(0X405455,	0X77);
	patch_byte	(0X405456,	0X57);
	patch_byte	(0X405457,	0X72);
	patch_byte	(0X405458,	0X69);
	patch_byte	(0X405459,	0X74);
	patch_byte	(0X40545A,	0X65);
	patch_byte	(0X40545B,	0X56);
	patch_byte	(0X40545C,	0X69);
	patch_byte	(0X40545D,	0X72);
	patch_byte	(0X40545E,	0X74);
	patch_byte	(0X40545F,	0X75);
	patch_byte	(0X405460,	0X61);
	patch_byte	(0X405461,	0X6C);
	patch_byte	(0X405462,	0X4D);
	patch_byte	(0X405463,	0X65);
	patch_byte	(0X405464,	0X6D);
	patch_byte	(0X405465,	0X6F);
	patch_byte	(0X405466,	0X72);
	patch_byte	(0X405467,	0X79);
	patch_byte	(0X40546C,	0X43);
	patch_byte	(0X40546D,	0X72);
	patch_byte	(0X40546E,	0X65);
	patch_byte	(0X40546F,	0X61);
	patch_byte	(0X405470,	0X74);
	patch_byte	(0X405471,	0X65);
	patch_byte	(0X405472,	0X52);
	patch_byte	(0X405473,	0X65);
	patch_byte	(0X405474,	0X6D);
	patch_byte	(0X405475,	0X6F);
	patch_byte	(0X405476,	0X74);
	patch_byte	(0X405477,	0X65);
	patch_byte	(0X405478,	0X54);
	patch_byte	(0X405479,	0X68);
	patch_byte	(0X40547A,	0X72);
	patch_byte	(0X40547B,	0X65);
	patch_byte	(0X40547C,	0X61);
	patch_byte	(0X40547D,	0X64);
	patch_byte	(0X405480,	0X57);
	patch_byte	(0X405481,	0X61);
	patch_byte	(0X405482,	0X69);
	patch_byte	(0X405483,	0X74);
	patch_byte	(0X405484,	0X46);
	patch_byte	(0X405485,	0X6F);
	patch_byte	(0X405486,	0X72);
	patch_byte	(0X405487,	0X53);
	patch_byte	(0X405488,	0X69);
	patch_byte	(0X405489,	0X6E);
	patch_byte	(0X40548A,	0X67);
	patch_byte	(0X40548B,	0X6C);
	patch_byte	(0X40548C,	0X65);
	patch_byte	(0X40548D,	0X4F);
	patch_byte	(0X40548E,	0X62);
	patch_byte	(0X40548F,	0X6A);
	patch_byte	(0X405490,	0X65);
	patch_byte	(0X405491,	0X63);
	patch_byte	(0X405492,	0X74);
	patch_byte	(0X405494,	0X43);
	patch_byte	(0X405495,	0X72);
	patch_byte	(0X405496,	0X65);
	patch_byte	(0X405497,	0X61);
	patch_byte	(0X405498,	0X74);
	patch_byte	(0X405499,	0X65);
	patch_byte	(0X40549A,	0X4D);
	patch_byte	(0X40549B,	0X75);
	patch_byte	(0X40549C,	0X74);
	patch_byte	(0X40549D,	0X65);
	patch_byte	(0X40549E,	0X78);
	patch_byte	(0X40549F,	0X41);
	patch_byte	(0X4054A4,	0X43);
	patch_byte	(0X4054A5,	0X72);
	patch_byte	(0X4054A6,	0X65);
	patch_byte	(0X4054A7,	0X61);
	patch_byte	(0X4054A8,	0X74);
	patch_byte	(0X4054A9,	0X65);
	patch_byte	(0X4054AA,	0X54);
	patch_byte	(0X4054AB,	0X68);
	patch_byte	(0X4054AC,	0X72);
	patch_byte	(0X4054AD,	0X65);
	patch_byte	(0X4054AE,	0X61);
	patch_byte	(0X4054AF,	0X64);
	patch_byte	(0X4054B4,	0X45);
	patch_byte	(0X4054B5,	0X78);
	patch_byte	(0X4054B6,	0X69);
	patch_byte	(0X4054B7,	0X74);
	patch_byte	(0X4054B8,	0X54);
	patch_byte	(0X4054B9,	0X68);
	patch_byte	(0X4054BA,	0X72);
	patch_byte	(0X4054BB,	0X65);
	patch_byte	(0X4054BC,	0X61);
	patch_byte	(0X4054BD,	0X64);
	patch_byte	(0X4054C0,	0X53);
	patch_byte	(0X4054C1,	0X6C);
	patch_byte	(0X4054C2,	0X65);
	patch_byte	(0X4054C3,	0X65);
	patch_byte	(0X4054C4,	0X70);
	patch_byte	(0X4054C8,	0X47);
	patch_byte	(0X4054C9,	0X65);
	patch_byte	(0X4054CA,	0X74);
	patch_byte	(0X4054CB,	0X54);
	patch_byte	(0X4054CC,	0X69);
	patch_byte	(0X4054CD,	0X63);
	patch_byte	(0X4054CE,	0X6B);
	patch_byte	(0X4054CF,	0X43);
	patch_byte	(0X4054D0,	0X6F);
	patch_byte	(0X4054D1,	0X75);
	patch_byte	(0X4054D2,	0X6E);
	patch_byte	(0X4054D3,	0X74);
	patch_byte	(0X4054D8,	0X43);
	patch_byte	(0X4054D9,	0X72);
	patch_byte	(0X4054DA,	0X65);
	patch_byte	(0X4054DB,	0X61);
	patch_byte	(0X4054DC,	0X74);
	patch_byte	(0X4054DD,	0X65);
	patch_byte	(0X4054DE,	0X46);
	patch_byte	(0X4054DF,	0X69);
	patch_byte	(0X4054E0,	0X6C);
	patch_byte	(0X4054E1,	0X65);
	patch_byte	(0X4054E2,	0X41);
	patch_byte	(0X4054E4,	0X57);
	patch_byte	(0X4054E5,	0X72);
	patch_byte	(0X4054E6,	0X69);
	patch_byte	(0X4054E7,	0X74);
	patch_byte	(0X4054E8,	0X65);
	patch_byte	(0X4054E9,	0X46);
	patch_byte	(0X4054EA,	0X69);
	patch_byte	(0X4054EB,	0X6C);
	patch_byte	(0X4054EC,	0X65);
	patch_byte	(0X4054F0,	0X43);
	patch_byte	(0X4054F1,	0X6C);
	patch_byte	(0X4054F2,	0X6F);
	patch_byte	(0X4054F3,	0X73);
	patch_byte	(0X4054F4,	0X65);
	patch_byte	(0X4054F5,	0X48);
	patch_byte	(0X4054F6,	0X61);
	patch_byte	(0X4054F7,	0X6E);
	patch_byte	(0X4054F8,	0X64);
	patch_byte	(0X4054F9,	0X6C);
	patch_byte	(0X4054FA,	0X65);
	patch_byte	(0X4054FC,	0X43);
	patch_byte	(0X4054FD,	0X72);
	patch_byte	(0X4054FE,	0X65);
	patch_byte	(0X4054FF,	0X61);
	patch_byte	(0X405500,	0X74);
	patch_byte	(0X405501,	0X65);
	patch_byte	(0X405502,	0X50);
	patch_byte	(0X405503,	0X72);
	patch_byte	(0X405504,	0X6F);
	patch_byte	(0X405505,	0X63);
	patch_byte	(0X405506,	0X65);
	patch_byte	(0X405507,	0X73);
	patch_byte	(0X405508,	0X73);
	patch_byte	(0X405509,	0X41);
	patch_byte	(0X40550C,	0X47);
	patch_byte	(0X40550D,	0X65);
	patch_byte	(0X40550E,	0X74);
	patch_byte	(0X40550F,	0X4C);
	patch_byte	(0X405510,	0X6F);
	patch_byte	(0X405511,	0X67);
	patch_byte	(0X405512,	0X69);
	patch_byte	(0X405513,	0X63);
	patch_byte	(0X405514,	0X61);
	patch_byte	(0X405515,	0X6C);
	patch_byte	(0X405516,	0X44);
	patch_byte	(0X405517,	0X72);
	patch_byte	(0X405518,	0X69);
	patch_byte	(0X405519,	0X76);
	patch_byte	(0X40551A,	0X65);
	patch_byte	(0X40551B,	0X53);
	patch_byte	(0X40551C,	0X74);
	patch_byte	(0X40551D,	0X72);
	patch_byte	(0X40551E,	0X69);
	patch_byte	(0X40551F,	0X6E);
	patch_byte	(0X405520,	0X67);
	patch_byte	(0X405521,	0X73);
	patch_byte	(0X405522,	0X41);
	patch_byte	(0X405524,	0X47);
	patch_byte	(0X405525,	0X65);
	patch_byte	(0X405526,	0X74);
	patch_byte	(0X405527,	0X44);
	patch_byte	(0X405528,	0X72);
	patch_byte	(0X405529,	0X69);
	patch_byte	(0X40552A,	0X76);
	patch_byte	(0X40552B,	0X65);
	patch_byte	(0X40552C,	0X54);
	patch_byte	(0X40552D,	0X79);
	patch_byte	(0X40552E,	0X70);
	patch_byte	(0X40552F,	0X65);
	patch_byte	(0X405530,	0X41);
	patch_byte	(0X405534,	0X43);
	patch_byte	(0X405535,	0X72);
	patch_byte	(0X405536,	0X65);
	patch_byte	(0X405537,	0X61);
	patch_byte	(0X405538,	0X74);
	patch_byte	(0X405539,	0X65);
	patch_byte	(0X40553A,	0X44);
	patch_byte	(0X40553B,	0X69);
	patch_byte	(0X40553C,	0X72);
	patch_byte	(0X40553D,	0X65);
	patch_byte	(0X40553E,	0X63);
	patch_byte	(0X40553F,	0X74);
	patch_byte	(0X405540,	0X6F);
	patch_byte	(0X405541,	0X72);
	patch_byte	(0X405542,	0X79);
	patch_byte	(0X405543,	0X41);
	patch_byte	(0X405548,	0X47);
	patch_byte	(0X405549,	0X65);
	patch_byte	(0X40554A,	0X74);
	patch_byte	(0X40554B,	0X4C);
	patch_byte	(0X40554C,	0X61);
	patch_byte	(0X40554D,	0X73);
	patch_byte	(0X40554E,	0X74);
	patch_byte	(0X40554F,	0X45);
	patch_byte	(0X405550,	0X72);
	patch_byte	(0X405551,	0X72);
	patch_byte	(0X405552,	0X6F);
	patch_byte	(0X405553,	0X72);
	patch_byte	(0X405558,	0X53);
	patch_byte	(0X405559,	0X65);
	patch_byte	(0X40555A,	0X74);
	patch_byte	(0X40555B,	0X46);
	patch_byte	(0X40555C,	0X69);
	patch_byte	(0X40555D,	0X6C);
	patch_byte	(0X40555E,	0X65);
	patch_byte	(0X40555F,	0X41);
	patch_byte	(0X405560,	0X74);
	patch_byte	(0X405561,	0X74);
	patch_byte	(0X405562,	0X72);
	patch_byte	(0X405563,	0X69);
	patch_byte	(0X405564,	0X62);
	patch_byte	(0X405565,	0X75);
	patch_byte	(0X405566,	0X74);
	patch_byte	(0X405567,	0X65);
	patch_byte	(0X405568,	0X73);
	patch_byte	(0X405569,	0X41);
	patch_byte	(0X40556C,	0X43);
	patch_byte	(0X40556D,	0X6F);
	patch_byte	(0X40556E,	0X70);
	patch_byte	(0X40556F,	0X79);
	patch_byte	(0X405570,	0X46);
	patch_byte	(0X405571,	0X69);
	patch_byte	(0X405572,	0X6C);
	patch_byte	(0X405573,	0X65);
	patch_byte	(0X405574,	0X41);
	patch_byte	(0X405578,	0X44);
	patch_byte	(0X405579,	0X65);
	patch_byte	(0X40557A,	0X6C);
	patch_byte	(0X40557B,	0X65);
	patch_byte	(0X40557C,	0X74);
	patch_byte	(0X40557D,	0X65);
	patch_byte	(0X40557E,	0X46);
	patch_byte	(0X40557F,	0X69);
	patch_byte	(0X405580,	0X6C);
	patch_byte	(0X405581,	0X65);
	patch_byte	(0X405582,	0X41);
	patch_byte	(0X405584,	0X6C);
	patch_byte	(0X405585,	0X73);
	patch_byte	(0X405586,	0X74);
	patch_byte	(0X405587,	0X72);
	patch_byte	(0X405588,	0X6C);
	patch_byte	(0X405589,	0X65);
	patch_byte	(0X40558A,	0X6E);
	patch_byte	(0X40558C,	0X6C);
	patch_byte	(0X40558D,	0X73);
	patch_byte	(0X40558E,	0X74);
	patch_byte	(0X40558F,	0X72);
	patch_byte	(0X405590,	0X63);
	patch_byte	(0X405591,	0X61);
	patch_byte	(0X405592,	0X74);
	patch_byte	(0X405594,	0X6C);
	patch_byte	(0X405595,	0X73);
	patch_byte	(0X405596,	0X74);
	patch_byte	(0X405597,	0X72);
	patch_byte	(0X405598,	0X63);
	patch_byte	(0X405599,	0X6D);
	patch_byte	(0X40559A,	0X70);
	patch_byte	(0X40559C,	0X6C);
	patch_byte	(0X40559D,	0X73);
	patch_byte	(0X40559E,	0X74);
	patch_byte	(0X40559F,	0X72);
	patch_byte	(0X4055A0,	0X63);
	patch_byte	(0X4055A1,	0X6D);
	patch_byte	(0X4055A2,	0X70);
	patch_byte	(0X4055A3,	0X69);
	patch_byte	(0X4055A8,	0X6C);
	patch_byte	(0X4055A9,	0X73);
	patch_byte	(0X4055AA,	0X74);
	patch_byte	(0X4055AB,	0X72);
	patch_byte	(0X4055AC,	0X63);
	patch_byte	(0X4055AD,	0X70);
	patch_byte	(0X4055AE,	0X79);
	patch_byte	(0X4055AF,	0X6E);
	patch_byte	(0X4055B4,	0X57);
	patch_byte	(0X4055B5,	0X53);
	patch_byte	(0X4055B6,	0X41);
	patch_byte	(0X4055B7,	0X53);
	patch_byte	(0X4055B8,	0X74);
	patch_byte	(0X4055B9,	0X61);
	patch_byte	(0X4055BA,	0X72);
	patch_byte	(0X4055BB,	0X74);
	patch_byte	(0X4055BC,	0X75);
	patch_byte	(0X4055BD,	0X70);
	patch_byte	(0X4055C0,	0X73);
	patch_byte	(0X4055C1,	0X6F);
	patch_byte	(0X4055C2,	0X63);
	patch_byte	(0X4055C3,	0X6B);
	patch_byte	(0X4055C4,	0X65);
	patch_byte	(0X4055C5,	0X74);
	patch_byte	(0X4055C8,	0X63);
	patch_byte	(0X4055C9,	0X6F);
	patch_byte	(0X4055CA,	0X6E);
	patch_byte	(0X4055CB,	0X6E);
	patch_byte	(0X4055CC,	0X65);
	patch_byte	(0X4055CD,	0X63);
	patch_byte	(0X4055CE,	0X74);
	patch_byte	(0X4055D0,	0X69);
	patch_byte	(0X4055D1,	0X6E);
	patch_byte	(0X4055D2,	0X65);
	patch_byte	(0X4055D3,	0X74);
	patch_byte	(0X4055D4,	0X5F);
	patch_byte	(0X4055D5,	0X61);
	patch_byte	(0X4055D6,	0X64);
	patch_byte	(0X4055D7,	0X64);
	patch_byte	(0X4055D8,	0X72);
	patch_byte	(0X4055DC,	0X68);
	patch_byte	(0X4055DD,	0X74);
	patch_byte	(0X4055DE,	0X6F);
	patch_byte	(0X4055DF,	0X6E);
	patch_byte	(0X4055E0,	0X73);
	patch_byte	(0X4055E4,	0X73);
	patch_byte	(0X4055E5,	0X65);
	patch_byte	(0X4055E6,	0X6E);
	patch_byte	(0X4055E7,	0X64);
	patch_byte	(0X4055EC,	0X72);
	patch_byte	(0X4055ED,	0X65);
	patch_byte	(0X4055EE,	0X63);
	patch_byte	(0X4055EF,	0X76);
	patch_byte	(0X4055F4,	0X63);
	patch_byte	(0X4055F5,	0X6C);
	patch_byte	(0X4055F6,	0X6F);
	patch_byte	(0X4055F7,	0X73);
	patch_byte	(0X4055F8,	0X65);
	patch_byte	(0X4055F9,	0X73);
	patch_byte	(0X4055FA,	0X6F);
	patch_byte	(0X4055FB,	0X63);
	patch_byte	(0X4055FC,	0X6B);
	patch_byte	(0X4055FD,	0X65);
	patch_byte	(0X4055FE,	0X74);
	patch_byte	(0X405600,	0X67);
	patch_byte	(0X405601,	0X65);
	patch_byte	(0X405602,	0X74);
	patch_byte	(0X405603,	0X68);
	patch_byte	(0X405604,	0X6F);
	patch_byte	(0X405605,	0X73);
	patch_byte	(0X405606,	0X74);
	patch_byte	(0X405607,	0X62);
	patch_byte	(0X405608,	0X79);
	patch_byte	(0X405609,	0X6E);
	patch_byte	(0X40560A,	0X61);
	patch_byte	(0X40560B,	0X6D);
	patch_byte	(0X40560C,	0X65);
	patch_byte	(0X405610,	0X49);
	patch_byte	(0X405611,	0X6E);
	patch_byte	(0X405612,	0X74);
	patch_byte	(0X405613,	0X65);
	patch_byte	(0X405614,	0X72);
	patch_byte	(0X405615,	0X6E);
	patch_byte	(0X405616,	0X65);
	patch_byte	(0X405617,	0X74);
	patch_byte	(0X405618,	0X4F);
	patch_byte	(0X405619,	0X70);
	patch_byte	(0X40561A,	0X65);
	patch_byte	(0X40561B,	0X6E);
	patch_byte	(0X40561C,	0X41);
	patch_byte	(0X405620,	0X49);
	patch_byte	(0X405621,	0X6E);
	patch_byte	(0X405622,	0X74);
	patch_byte	(0X405623,	0X65);
	patch_byte	(0X405624,	0X72);
	patch_byte	(0X405625,	0X6E);
	patch_byte	(0X405626,	0X65);
	patch_byte	(0X405627,	0X74);
	patch_byte	(0X405628,	0X4F);
	patch_byte	(0X405629,	0X70);
	patch_byte	(0X40562A,	0X65);
	patch_byte	(0X40562B,	0X6E);
	patch_byte	(0X40562C,	0X55);
	patch_byte	(0X40562D,	0X72);
	patch_byte	(0X40562E,	0X6C);
	patch_byte	(0X40562F,	0X41);
	patch_byte	(0X405634,	0X49);
	patch_byte	(0X405635,	0X6E);
	patch_byte	(0X405636,	0X74);
	patch_byte	(0X405637,	0X65);
	patch_byte	(0X405638,	0X72);
	patch_byte	(0X405639,	0X6E);
	patch_byte	(0X40563A,	0X65);
	patch_byte	(0X40563B,	0X74);
	patch_byte	(0X40563C,	0X43);
	patch_byte	(0X40563D,	0X6C);
	patch_byte	(0X40563E,	0X6F);
	patch_byte	(0X40563F,	0X73);
	patch_byte	(0X405640,	0X65);
	patch_byte	(0X405641,	0X48);
	patch_byte	(0X405642,	0X61);
	patch_byte	(0X405643,	0X6E);
	patch_byte	(0X405644,	0X64);
	patch_byte	(0X405645,	0X6C);
	patch_byte	(0X405646,	0X65);
	patch_byte	(0X405648,	0X49);
	patch_byte	(0X405649,	0X6E);
	patch_byte	(0X40564A,	0X74);
	patch_byte	(0X40564B,	0X65);
	patch_byte	(0X40564C,	0X72);
	patch_byte	(0X40564D,	0X6E);
	patch_byte	(0X40564E,	0X65);
	patch_byte	(0X40564F,	0X74);
	patch_byte	(0X405650,	0X52);
	patch_byte	(0X405651,	0X65);
	patch_byte	(0X405652,	0X61);
	patch_byte	(0X405653,	0X64);
	patch_byte	(0X405654,	0X46);
	patch_byte	(0X405655,	0X69);
	patch_byte	(0X405656,	0X6C);
	patch_byte	(0X405657,	0X65);
	patch_byte	(0X40565C,	0X53);
	patch_byte	(0X40565D,	0X68);
	patch_byte	(0X40565E,	0X65);
	patch_byte	(0X40565F,	0X6C);
	patch_byte	(0X405660,	0X6C);
	patch_byte	(0X405661,	0X45);
	patch_byte	(0X405662,	0X78);
	patch_byte	(0X405663,	0X65);
	patch_byte	(0X405664,	0X63);
	patch_byte	(0X405665,	0X75);
	patch_byte	(0X405666,	0X74);
	patch_byte	(0X405667,	0X65);
	patch_byte	(0X405668,	0X41);
	patch_byte	(0X40566C,	0X52);
	patch_byte	(0X40566D,	0X65);
	patch_byte	(0X40566E,	0X67);
	patch_byte	(0X40566F,	0X43);
	patch_byte	(0X405670,	0X72);
	patch_byte	(0X405671,	0X65);
	patch_byte	(0X405672,	0X61);
	patch_byte	(0X405673,	0X74);
	patch_byte	(0X405674,	0X65);
	patch_byte	(0X405675,	0X4B);
	patch_byte	(0X405676,	0X65);
	patch_byte	(0X405677,	0X79);
	patch_byte	(0X405678,	0X45);
	patch_byte	(0X405679,	0X78);
	patch_byte	(0X40567A,	0X41);
	patch_byte	(0X40567C,	0X52);
	patch_byte	(0X40567D,	0X65);
	patch_byte	(0X40567E,	0X67);
	patch_byte	(0X40567F,	0X53);
	patch_byte	(0X405680,	0X65);
	patch_byte	(0X405681,	0X74);
	patch_byte	(0X405682,	0X56);
	patch_byte	(0X405683,	0X61);
	patch_byte	(0X405684,	0X6C);
	patch_byte	(0X405685,	0X75);
	patch_byte	(0X405686,	0X65);
	patch_byte	(0X405687,	0X45);
	patch_byte	(0X405688,	0X78);
	patch_byte	(0X405689,	0X41);
	patch_byte	(0X40568C,	0X52);
	patch_byte	(0X40568D,	0X65);
	patch_byte	(0X40568E,	0X67);
	patch_byte	(0X40568F,	0X43);
	patch_byte	(0X405690,	0X6C);
	patch_byte	(0X405691,	0X6F);
	patch_byte	(0X405692,	0X73);
	patch_byte	(0X405693,	0X65);
	patch_byte	(0X405694,	0X4B);
	patch_byte	(0X405695,	0X65);
	patch_byte	(0X405696,	0X79);
	patch_byte	(0X405698,	0X52);
	patch_byte	(0X405699,	0X65);
	patch_byte	(0X40569A,	0X67);
	patch_byte	(0X40569B,	0X44);
	patch_byte	(0X40569C,	0X65);
	patch_byte	(0X40569D,	0X6C);
	patch_byte	(0X40569E,	0X65);
	patch_byte	(0X40569F,	0X74);
	patch_byte	(0X4056A0,	0X65);
	patch_byte	(0X4056A1,	0X4B);
	patch_byte	(0X4056A2,	0X65);
	patch_byte	(0X4056A3,	0X79);
	patch_byte	(0X4056A4,	0X41);
	patch_byte	(0X4056A8,	0X52);
	patch_byte	(0X4056A9,	0X65);
	patch_byte	(0X4056AA,	0X67);
	patch_byte	(0X4056AB,	0X44);
	patch_byte	(0X4056AC,	0X65);
	patch_byte	(0X4056AD,	0X6C);
	patch_byte	(0X4056AE,	0X65);
	patch_byte	(0X4056AF,	0X74);
	patch_byte	(0X4056B0,	0X65);
	patch_byte	(0X4056B1,	0X56);
	patch_byte	(0X4056B2,	0X61);
	patch_byte	(0X4056B3,	0X6C);
	patch_byte	(0X4056B4,	0X75);
	patch_byte	(0X4056B5,	0X65);
	patch_byte	(0X4056B6,	0X41);
	patch_byte	(0X4056B8,	0X6E);
	patch_byte	(0X4056B9,	0X74);
	patch_byte	(0X4056BA,	0X64);
	patch_byte	(0X4056BB,	0X6C);
	patch_byte	(0X4056BC,	0X6C);
	patch_byte	(0X4056BD,	0X2E);
	patch_byte	(0X4056BE,	0X64);
	patch_byte	(0X4056BF,	0X6C);
	patch_byte	(0X4056C0,	0X6C);
	patch_byte	(0X4056C4,	0X65);
	patch_byte	(0X4056C5,	0X78);
	patch_byte	(0X4056C6,	0X70);
	patch_byte	(0X4056C7,	0X6C);
	patch_byte	(0X4056C8,	0X6F);
	patch_byte	(0X4056C9,	0X72);
	patch_byte	(0X4056CA,	0X65);
	patch_byte	(0X4056CB,	0X72);
	patch_byte	(0X4056CC,	0X2E);
	patch_byte	(0X4056CD,	0X65);
	patch_byte	(0X4056CE,	0X78);
	patch_byte	(0X4056CF,	0X65);
}

//------------------------------------------------------------------------
// Information about bytes

static Bytes_0(void) {
        auto x;
#define id x

	update_extra_cmt		(0X401000,	E_PREV + 0,	"; File Name   : C:\\Users\\QWER\\Desktop\\4eb33ce768def8f7db79ef935aabf1c712f78974237e96889e1be3ced0d7e619\\4eb33ce768def8f7db79ef935aabf1c712f78974237e96889e1be3ced0d7e619");
	update_extra_cmt		(0X401000,	E_PREV + 1,	"; Format      : Portable executable for 80386 (PE)");
	update_extra_cmt		(0X401000,	E_PREV + 2,	"; Imagebase   : 400000");
	update_extra_cmt		(0X401000,	E_PREV + 3,	"; Timestamp   : 4B689AE7 (Tue Feb 02 21:36:39 2010)");
	update_extra_cmt		(0X401000,	E_PREV + 4,	"; Section 1. (virtual address 00001000)");
	update_extra_cmt		(0X401000,	E_PREV + 5,	"; Virtual size                  : 00002014 (   8212.)");
	update_extra_cmt		(0X401000,	E_PREV + 6,	"; Section size in file          : 00002200 (   8704.)");
	update_extra_cmt		(0X401000,	E_PREV + 7,	"; Offset to raw data for section: 00000400");
	update_extra_cmt		(0X401000,	E_PREV + 8,	"; Flags 60000020: Text Executable Readable");
	update_extra_cmt		(0X401000,	E_PREV + 9,	"; Alignment     : default");
	create_insn	(0X401000);
	create_insn	(x=0X401003);
	op_hex		(x,	1);
	create_insn	(x=0X40100B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40101C);
	op_stkvar	(x,	1);
	create_insn	(x=0X401023);
	op_stkvar	(x,	0);
	create_insn	(x=0X40102B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40103F);
	op_stkvar	(x,	1);
	create_insn	(x=0X40107D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401089);
	op_stkvar	(x,	1);
	create_insn	(x=0X40109E);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010AA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010B7);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010DA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X4010FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X401102);
	op_stkvar	(x,	1);
	create_insn	(x=0X401117);
	op_stkvar	(x,	1);
	create_insn	(x=0X40112A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40113C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401143);
	op_stkvar	(x,	1);
	create_insn	(x=0X40114B);
	op_stkvar	(x,	0);
	create_insn	(x=0X401161);
	op_stkvar	(x,	1);
	create_insn	(x=0X401164);
	op_stkvar	(x,	0);
	create_insn	(x=0X40116C);
	op_stkvar	(x,	0);
	create_insn	(x=0X40117D);
	op_stkvar	(x,	1);
	create_insn	(x=0X40118F);
	op_stkvar	(x,	1);
	create_insn	(x=0X40119B);
	op_stkvar	(x,	1);
	create_insn	(x=0X4011B2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4011C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X4011CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4011E3);
	op_stkvar	(x,	1);
	create_insn	(x=0X40120D);
	op_stkvar	(x,	0);
	create_insn	(x=0X40121A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40122F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401244);
	op_stkvar	(x,	0);
	create_insn	(x=0X401250);
	op_stkvar	(x,	1);
	create_insn	(x=0X401277);
	op_stkvar	(x,	1);
	create_insn	(x=0X40127F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401282);
	op_stkvar	(x,	1);
	create_insn	(x=0X40129A);
	op_hex		(x,	1);
	create_insn	(x=0X4012B1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4012FF);
	op_stkvar	(x,	0);
	create_insn	(0X401308);
	create_insn	(x=0X401328);
	op_stkvar	(x,	1);
	create_insn	(x=0X401340);
	op_hex		(x,	1);
	create_insn	(x=0X401357);
	op_stkvar	(x,	0);
	create_insn	(x=0X4013A5);
	op_stkvar	(x,	0);
	create_insn	(0X4013AE);
	create_insn	(x=0X4013CE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4013E6);
	op_hex		(x,	1);
	create_insn	(x=0X4013FD);
	op_stkvar	(x,	0);
	create_insn	(x=0X40144B);
	op_stkvar	(x,	0);
	create_insn	(0X401454);
	create_insn	(x=0X40146B);
	op_stkvar	(x,	0);
	create_insn	(0X40147D);
	create_insn	(x=0X40148A);
	op_stkvar	(x,	0);
	create_insn	(0X4014B5);
	create_insn	(x=0X4014CB);
	op_stkvar	(x,	1);
	create_insn	(x=0X4014CF);
	op_stkvar	(x,	1);
	create_insn	(0X4014D6);
	create_insn	(x=0X4014D9);
	op_stkvar	(x,	1);
	create_insn	(0X40155D);
	create_insn	(x=0X401560);
	op_hex		(x,	1);
	create_insn	(x=0X401564);
	op_stkvar	(x,	1);
	create_insn	(x=0X401568);
	op_stkvar	(x,	0);
	create_insn	(x=0X401577);
	op_hex		(x,	1);
	create_insn	(x=0X40157C);
	op_stkvar	(x,	0);
	create_insn	(x=0X40157F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401584);
	op_stkvar	(x,	0);
	create_insn	(x=0X40158D);
	op_stkvar	(x,	0);
	create_insn	(0X4015A8);
	create_insn	(x=0X4015AA);
	op_stkvar	(x,	1);
	create_insn	(0X4015BD);
	create_insn	(0X4015C3);
	create_insn	(x=0X4015C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4015C8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4015D8);
	op_stkvar	(x,	0);
	create_insn	(0X4015E5);
	create_insn	(0X4015EE);
	create_insn	(x=0X4015F1);
	op_hex		(x,	1);
	create_insn	(x=0X4015F9);
	op_stkvar	(x,	1);
	create_insn	(x=0X401606);
	op_stkvar	(x,	1);
	create_insn	(x=0X40161F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401631);
	op_stkvar	(x,	1);
	create_insn	(x=0X401646);
	op_stkvar	(x,	1);
	create_insn	(x=0X401652);
	op_stkvar	(x,	1);
	create_insn	(x=0X40165F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401666);
	op_stkvar	(x,	0);
	create_insn	(x=0X401670);
	op_stkvar	(x,	1);
	create_insn	(x=0X401683);
	op_stkvar	(x,	1);
	create_insn	(x=0X401693);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016A8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016C1);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016C8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4016D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X4016FA);
	op_stkvar	(x,	1);
	create_insn	(x=0X40170A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40171F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401734);
	op_stkvar	(x,	1);
	create_insn	(x=0X401740);
	op_stkvar	(x,	1);
	create_insn	(x=0X40174D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401754);
	op_stkvar	(x,	0);
	create_insn	(0X401762);
	create_insn	(x=0X401765);
	op_hex		(x,	1);
	create_insn	(x=0X40176B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401775);
	op_stkvar	(x,	1);
	create_insn	(x=0X40178A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40179E);
	op_stkvar	(x,	1);
	create_insn	(x=0X4017A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4017B4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4017C8);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X4017D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4017D7);
	op_stkvar	(x,	0);
	create_insn	(x=0X4017E0);
	op_hex		(x,	1);
	create_insn	(0X4017E9);
	create_insn	(0X4017EE);
	create_insn	(0X4017F5);
	create_insn	(x=0X4017F8);
	op_hex		(x,	1);
	create_insn	(x=0X401800);
	op_stkvar	(x,	1);
	create_insn	(x=0X401803);
	op_stkvar	(x,	1);
	create_insn	(x=0X40182B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40183D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401858);
	op_stkvar	(x,	1);
	create_insn	(x=0X40186A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40187F);
	op_stkvar	(x,	1);
	create_insn	(x=0X40188B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401898);
	op_stkvar	(x,	1);
	create_insn	(x=0X40189F);
	op_stkvar	(x,	0);
	create_insn	(0X4018AD);
	create_insn	(x=0X4018B3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018B9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018BC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4018C1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018C6);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018CD);
	op_stkvar	(x,	1);
	create_insn	(x=0X4018D7);
	op_hex		(x,	1);
	create_insn	(x=0X4018E2);
	op_hex		(x,	1);
	create_insn	(x=0X4018E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4018EE);
	op_stkvar	(x,	0);
	create_insn	(x=0X4018FC);
	op_hex		(x,	1);
	create_insn	(x=0X4018FF);
	op_stkvar	(x,	0);
	create_insn	(x=0X401906);
	op_stkvar	(x,	1);
	create_insn	(x=0X401912);
	op_stkvar	(x,	0);
	create_insn	(x=0X401915);
	op_stkvar	(x,	1);
	create_insn	(x=0X40192E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401943);
	op_stkvar	(x,	1);
	create_insn	(x=0X40194F);
	op_stkvar	(x,	0);
	create_insn	(x=0X401957);
	op_stkvar	(x,	1);
	create_insn	(x=0X401961);
	op_hex		(x,	1);
	create_insn	(0X401968);
	create_insn	(x=0X40196E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401983);
	op_stkvar	(x,	1);
	create_insn	(x=0X4019A2);
	op_stkvar	(x,	0);
	create_insn	(x=0X4019A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4019B9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4019C3);
	op_stkvar	(x,	0);
	create_insn	(0X4019D6);
	create_insn	(x=0X4019E1);
	op_stkvar	(x,	0);
	create_insn	(x=0X4019EF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4019F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4019FC);
	op_hex		(x,	1);
	create_insn	(0X401A01);
	create_insn	(x=0X401A08);
	op_stkvar	(x,	1);
	create_insn	(x=0X401A0C);
	op_stkvar	(x,	1);
	create_insn	(0X401A1F);
	create_insn	(x=0X401A25);
	op_stkvar	(x,	1);
	create_insn	(0X401A4E);
	create_insn	(0X401A52);
	create_insn	(0X401A58);
	create_insn	(x=0X401A5A);
	op_stkvar	(x,	0);
	create_insn	(x=0X401A6A);
	op_stkvar	(x,	1);
	create_insn	(x=0X401A81);
	op_stkvar	(x,	1);
	create_insn	(x=0X401A8B);
	op_stkvar	(x,	1);
	create_insn	(0X401A94);
	create_insn	(x=0X401A96);
	op_stkvar	(x,	1);
	create_insn	(0X401AA3);
	create_insn	(x=0X401AA6);
	op_hex		(x,	1);
	create_insn	(x=0X401AB4);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AB9);
	op_stkvar	(x,	1);
	create_insn	(x=0X401ABC);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AD4);
	op_hex		(x,	1);
	create_insn	(x=0X401AD7);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AE7);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AF0);
	op_stkvar	(x,	1);
	create_insn	(x=0X401AF9);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B14);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B18);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B1C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B25);
	op_hex		(x,	1);
	create_insn	(x=0X401B2C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401B32);
	op_stkvar	(x,	0);
	create_insn	(0X401B44);
	create_insn	(x=0X401B47);
	op_hex		(x,	1);
	create_insn	(x=0X401B4F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B5A);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B62);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B65);
	op_stkvar	(x,	1);
	create_insn	(x=0X401B8B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401BA0);
	op_stkvar	(x,	1);
	create_insn	(x=0X401BAA);
	op_stkvar	(x,	0);
	create_insn	(x=0X401BAF);
	op_stkvar	(x,	1);
	create_insn	(x=0X401BC4);
	op_stkvar	(x,	1);
	create_insn	(x=0X401BD6);
	op_stkvar	(x,	1);
	create_insn	(x=0X401BEB);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C00);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C0D);
	op_stkvar	(x,	1);
	create_insn	(x=0X401C14);
	op_stkvar	(x,	0);
	create_insn	(0X401C22);
	create_insn	(0X401C32);
	create_insn	(0X401C47);
	create_insn	(x=0X401C5C);
	op_stkvar	(x,	1);
	create_insn	(0X401C8E);
	create_insn	(x=0X401CAD);
	op_stkvar	(x,	1);
	create_insn	(x=0X401CBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X401CC5);
	op_stkvar	(x,	1);
	create_insn	(x=0X401CC8);
	op_stkvar	(x,	1);
	create_insn	(0X401CE3);
	create_insn	(x=0X401CFD);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D0B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D20);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D2F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D32);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D3E);
	op_stkvar	(x,	0);
	create_insn	(x=0X401D50);
	op_stkvar	(x,	0);
	create_insn	(x=0X401D80);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D92);
	op_stkvar	(x,	1);
	create_insn	(x=0X401D9A);
	op_stkvar	(x,	0);
	create_insn	(x=0X401DB6);
	op_stkvar	(x,	1);
	create_insn	(0X401DCC);
	create_insn	(0X401DD3);
	create_insn	(x=0X401DD4);
	op_stkvar	(x,	1);
	create_insn	(x=0X401DEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X401DF3);
	op_hex		(x,	1);
	create_insn	(x=0X401E05);
	op_stkvar	(x,	1);
	create_insn	(0X401E0B);
	create_insn	(0X401E0F);
	create_insn	(x=0X401E12);
	op_stkvar	(x,	0);
	create_insn	(x=0X401E1C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401E1F);
	op_stkvar	(x,	1);
	create_insn	(x=0X401E22);
	op_stkvar	(x,	1);
	create_insn	(x=0X401E33);
	op_stkvar	(x,	0);
	create_insn	(0X401E42);
	create_insn	(x=0X401E45);
	op_hex		(x,	1);
	create_insn	(x=0X401E54);
	op_stkvar	(x,	1);
	create_insn	(x=0X401E59);
	op_stkvar	(x,	0);
	create_insn	(x=0X401E63);
	op_stkvar	(x,	1);
	create_insn	(x=0X401E6D);
	op_hex		(x,	1);
	create_insn	(x=0X401E70);
	op_stkvar	(x,	0);
	create_insn	(x=0X401E73);
	op_stkvar	(x,	1);
	create_insn	(x=0X401E76);
	op_stkvar	(x,	0);
	create_insn	(x=0X401E88);
	op_stkvar	(x,	0);
	create_insn	(x=0X401EB2);
	op_stkvar	(x,	0);
	create_insn	(x=0X401ED2);
	op_stkvar	(x,	0);
	create_insn	(x=0X401EDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X401EE9);
	op_stkvar	(x,	1);
	create_insn	(x=0X401EF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X401EFA);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F07);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X401F13);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F16);
	op_stkvar	(x,	1);
	create_insn	(x=0X401F1D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F25);
	op_stkvar	(x,	1);
	create_insn	(0X401F2B);
	create_insn	(x=0X401F2D);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F38);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F4C);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F55);
	op_stkvar	(x,	1);
	create_insn	(x=0X401F5B);
	op_stkvar	(x,	1);
	create_insn	(x=0X401F73);
	op_stkvar	(x,	0);
	create_insn	(x=0X401F93);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FA8);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FBB);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X401FDA);
	op_stkvar	(x,	0);
	create_insn	(0X401FEC);
	create_insn	(x=0X401FF2);
	op_stkvar	(x,	1);
	create_insn	(x=0X402007);
	op_stkvar	(x,	1);
	create_insn	(x=0X40201C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402028);
	op_stkvar	(x,	1);
	create_insn	(x=0X402047);
	op_stkvar	(x,	1);
	create_insn	(x=0X40204C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402057);
	op_stkvar	(x,	1);
	create_insn	(x=0X402067);
	op_hex		(x,	1);
	create_insn	(x=0X40206F);
	op_hex		(x,	1);
	create_insn	(x=0X402076);
	op_hex		(x,	1);
	create_insn	(0X402081);
	create_insn	(x=0X402084);
	op_hex		(x,	1);
	create_insn	(x=0X40208C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402097);
	op_stkvar	(x,	0);
	create_insn	(x=0X40209A);
	op_stkvar	(x,	1);
	create_insn	(x=0X4020AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4020D2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4020E5);
	op_stkvar	(x,	1);
	create_insn	(x=0X4020EF);
	op_stkvar	(x,	0);
	create_insn	(x=0X402112);
	op_stkvar	(x,	1);
	create_insn	(x=0X402122);
	op_stkvar	(x,	1);
	create_insn	(x=0X40214A);
	op_stkvar	(x,	1);
	create_insn	(x=0X40215D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402172);
	op_stkvar	(x,	1);
	create_insn	(x=0X402184);
	op_stkvar	(x,	1);
	create_insn	(x=0X402199);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021BA);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021BE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021D3);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021E8);
	op_stkvar	(x,	1);
	create_insn	(x=0X4021F5);
	op_stkvar	(x,	1);
	create_insn	(0X402219);
	create_insn	(x=0X40221C);
	op_hex		(x,	1);
	create_insn	(x=0X402229);
	op_stkvar	(x,	1);
	create_insn	(x=0X40222F);
	op_stkvar	(x,	0);
	create_insn	(x=0X402234);
	op_stkvar	(x,	1);
	create_insn	(x=0X40223E);
	op_stkvar	(x,	1);
	create_insn	(x=0X402248);
	op_stkvar	(x,	1);
	create_insn	(x=0X40225D);
	op_stkvar	(x,	1);
	create_insn	(x=0X40226B);
	op_stkvar	(x,	1);
	create_insn	(x=0X40228C);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022A3);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022AF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022D0);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022E7);
	op_stkvar	(x,	1);
	create_insn	(x=0X4022FC);
	op_stkvar	(x,	1);
	create_insn	(x=0X40230F);
	op_stkvar	(x,	1);
	create_insn	(x=0X40232B);
	op_stkvar	(x,	1);
	create_insn	(x=0X402334);
	op_stkvar	(x,	0);
	create_insn	(x=0X40234A);
	op_stkvar	(x,	1);
	create_insn	(0X40235C);
	create_insn	(x=0X402364);
	op_stkvar	(x,	1);
	create_insn	(x=0X40236E);
	op_stkvar	(x,	1);
	create_insn	(x=0X40237D);
	op_hex		(x,	1);
	create_insn	(x=0X402389);
	op_stkvar	(x,	1);
	create_insn	(x=0X402395);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023A8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4023AD);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023BD);
	op_stkvar	(x,	0);
	create_insn	(x=0X4023C4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023CC);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023E6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4023F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X402408);
	op_stkvar	(x,	1);
	create_insn	(x=0X40241D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402432);
	op_stkvar	(x,	1);
	create_insn	(x=0X402447);
	op_stkvar	(x,	1);
	create_insn	(x=0X40245C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402471);
	op_stkvar	(x,	1);
	create_insn	(x=0X40247D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402493);
	op_stkvar	(x,	1);
	create_insn	(x=0X40249D);
	op_stkvar	(x,	0);
	create_insn	(x=0X4024A4);
	op_stkvar	(x,	1);
	create_insn	(x=0X4024AE);
	op_stkvar	(x,	1);
	create_insn	(x=0X4024C3);
	op_stkvar	(x,	1);
	create_insn	(x=0X4024CF);
	op_stkvar	(x,	1);
	create_insn	(x=0X4024E5);
	op_stkvar	(x,	1);
	create_insn	(0X4024FF);
	create_insn	(x=0X402501);
	op_stkvar	(x,	1);
	create_insn	(x=0X402507);
	op_stkvar	(x,	1);
	create_insn	(x=0X402512);
	op_stkvar	(x,	1);
	create_insn	(x=0X402525);
	op_stkvar	(x,	1);
	create_insn	(0X402535);
	create_insn	(x=0X402538);
	op_hex		(x,	1);
	create_insn	(x=0X402540);
	op_stkvar	(x,	1);
	create_insn	(x=0X402550);
	op_stkvar	(x,	0);
	create_insn	(x=0X40255C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402571);
	op_stkvar	(x,	1);
	create_insn	(x=0X402583);
	op_stkvar	(x,	1);
	create_insn	(x=0X40258F);
	op_stkvar	(x,	1);
	create_insn	(x=0X402598);
	op_stkvar	(x,	1);
	create_insn	(x=0X4025BB);
	op_stkvar	(x,	0);
	create_insn	(x=0X4025D6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4025D9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4025E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X4025ED);
	op_stkvar	(x,	1);
	create_insn	(x=0X402615);
	op_stkvar	(x,	0);
	create_insn	(x=0X402620);
	op_stkvar	(x,	0);
	create_insn	(x=0X40263F);
	op_stkvar	(x,	1);
	create_insn	(x=0X402667);
	op_stkvar	(x,	0);
	create_insn	(x=0X402675);
	op_stkvar	(x,	1);
	create_insn	(x=0X40269C);
	op_stkvar	(x,	0);
	create_insn	(x=0X4026B6);
	op_stkvar	(x,	1);
	create_insn	(x=0X4026B9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4026C4);
	op_stkvar	(x,	0);
	create_insn	(x=0X4026DB);
	op_stkvar	(x,	1);
	create_insn	(x=0X402706);
	op_stkvar	(x,	0);
	create_insn	(x=0X402711);
	op_stkvar	(x,	0);
	create_insn	(x=0X40272F);
	op_stkvar	(x,	1);
	create_insn	(x=0X402736);
	op_stkvar	(x,	1);
	create_insn	(x=0X402753);
	op_stkvar	(x,	1);
	create_insn	(x=0X402759);
	op_stkvar	(x,	1);
	create_insn	(x=0X40275D);
	op_hex		(x,	1);
	create_insn	(x=0X402765);
	op_stkvar	(x,	1);
	create_insn	(x=0X402778);
	op_hex		(x,	1);
	create_insn	(x=0X40277B);
	op_hex		(x,	1);
	create_insn	(0X402781);
	set_name	(0X402781,	"mw_enable_privileges");
	create_insn	(x=0X402784);
	op_hex		(x,	1);
	create_insn	(x=0X402787);
	op_stkvar	(x,	1);
	set_cmt	(0X40278A,	"TokenHandle",	0);
	set_cmt	(0X40278B,	"DesiredAccess",	0);
	set_cmt	(0X402793,	"ProcessHandle",	0);
	create_insn	(x=0X4027A0);
	op_stkvar	(x,	1);
	set_cmt	(0X4027A4,	"lpLuid",	0);
	set_cmt	(0X4027A7,	"lpName",	0);
	create_insn	(x=0X4027A7);
	op_stkvar	(x,	0);
	set_cmt	(0X4027AA,	"lpSystemName",	0);
	create_insn	(x=0X4027B5);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	set_cmt	(0X4027B9,	"ReturnLength",	0);
	set_cmt	(0X4027BA,	"PreviousState",	0);
	create_insn	(x=0X4027BB);
	op_stkvar	(x,	1);
	set_cmt	(0X4027BE,	"BufferLength",	0);
	set_cmt	(0X4027BF,	"NewState",	0);
	set_cmt	(0X4027C0,	"DisableAllPrivileges",	0);
	create_insn	(x=0X4027C1);
	op_stkvar	(x,	0);
	set_cmt	(0X4027C8,	"TokenHandle",	0);
	create_insn	(x=0X4027C8);
	op_stkvar	(x,	0);
	set_cmt	(0X4027D3,	"hObject",	0);
	create_insn	(x=0X4027D3);
	op_stkvar	(x,	0);
	create_insn	(0X4027E1);
	set_name	(0X4027E1,	"mw_decrypt_str");
	create_insn	(x=0X4027ED);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	set_cmt	(0X4027FB,	"lpString",	0);
	set_cmt	(0X402805,	"lpString",	0);
	create_insn	(x=0X402805);
	op_stkvar	(x,	0);
	create_insn	(x=0X402813);
	op_stkvar	(x,	1);
	set_cmt	(0X402819,	"lpString",	0);
	set_cmt	(0X402831,	"lpString",	0);
	create_insn	(0X402848);
	set_name	(0X402848,	"start");
	create_insn	(x=0X40284B);
	op_hex		(x,	1);
	create_insn	(x=0X402851);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X402860);
	op_stkvar	(x,	1);
	create_insn	(x=0X402868);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402872,	"lpString",	0);
	set_cmt	(0X40287F,	"lpLibFileName",	0);
	create_insn	(x=0X40288F);
	op_stkvar	(x,	0);
	set_cmt	(0X402898,	"lpProcName",	0);
	set_cmt	(0X4028A4,	"hModule",	0);
	set_cmt	(0X4028A7,	"lpProcName",	0);
	set_cmt	(0X4028AF,	"hModule",	0);
	set_cmt	(0X4028B2,	"lpProcName",	0);
	create_insn	(x=0X4028B8);
	op_stkvar	(x,	0);
	set_cmt	(0X4028BB,	"hModule",	0);
	set_cmt	(0X4028BE,	"lpProcName",	0);
	create_insn	(x=0X4028C4);
	op_stkvar	(x,	0);
	set_cmt	(0X4028C7,	"hModule",	0);
	create_insn	(x=0X4028CE);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028D8);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028E1);
	op_stkvar	(x,	1);
	create_insn	(x=0X4028E7);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028F3);
	op_stkvar	(x,	0);
	create_insn	(x=0X4028FA);
	op_stkvar	(x,	1);
	set_cmt	(0X402904,	"lpString2",	0);
	create_insn	(0X402904);
	create_insn	(x=0X40290A);
	op_stkvar	(x,	1);
	set_cmt	(0X402910,	"lpString1",	0);
	create_insn	(x=0X40291B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402927);
	op_stkvar	(x,	0);
	create_insn	(x=0X40292E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402933);
	op_stkvar	(x,	1);
	create_insn	(x=0X40293A);
	op_stkvar	(x,	0);
	create_insn	(x=0X40293D);
	op_stkvar	(x,	0);
	create_insn	(x=0X402944);
	op_stkvar	(x,	1);
	set_cmt	(0X402947,	"lpProcName",	0);
	set_cmt	(0X40294D,	"hModule",	0);
	create_insn	(x=0X402950);
	op_stkvar	(x,	0);
	create_insn	(x=0X402953);
	op_stkvar	(x,	0);
	set_cmt	(0X402963,	"lpProcName",	0);
	create_insn	(x=0X402969);
	op_stkvar	(x,	0);
	op_hex		(x,	1);
	create_insn	(x=0X402970);
	op_stkvar	(x,	0);
	set_cmt	(0X40297A,	"hModule",	0);
	create_insn	(x=0X40297D);
	op_stkvar	(x,	1);
	set_cmt	(0X40298D,	"lpLibFileName",	0);
	set_cmt	(0X4029A1,	"lpProcName",	0);
	set_cmt	(0X4029A7,	"hModule",	0);
	create_insn	(x=0X4029AC);
	op_stkvar	(x,	0);
	set_cmt	(0X4029B5,	"lpProcName",	0);
	set_cmt	(0X4029BB,	"hModule",	0);
	create_insn	(x=0X4029BE);
	op_stkvar	(x,	0);
	create_insn	(x=0X4029C1);
	op_stkvar	(x,	0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X4029CD);
	op_stkvar	(x,	1);
	set_cmt	(0X4029D9,	"lpString",	0);
	create_insn	(x=0X4029E4);
	op_stkvar	(x,	0);
	create_insn	(x=0X4029E9);
	op_stkvar	(x,	0);
	create_insn	(x=0X4029F2);
	op_stkvar	(x,	1);
	create_insn	(x=0X4029F6);
	op_stkvar	(x,	1);
	set_cmt	(0X4029F9,	"lpString",	0);
	create_insn	(x=0X402A02);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A07);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A0B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A16);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A19);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A1E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A22);
	op_stkvar	(x,	0);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402A34);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402A39);
	op_stkvar	(x,	0);
	set_cmt	(0X402A3F,	"lpString",	0);
	create_insn	(x=0X402A4B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A50);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A59);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A5D);
	op_stkvar	(x,	1);
	set_cmt	(0X402A60,	"lpString",	0);
	create_insn	(x=0X402A69);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A6E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A72);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A80);
	op_stkvar	(x,	1);
	create_insn	(x=0X402A88);
	op_stkvar	(x,	0);
	create_insn	(x=0X402A90);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402A97);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402AA1);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AA4);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AA9);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X402AB6);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AB9);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402AC0);
	op_stkvar	(x,	0);
	create_insn	(x=0X402ACB);
	op_stkvar	(x,	1);
	create_insn	(x=0X402AD0);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AD3);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402AD8);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402AE2);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AE5);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AEA);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AF3);
	op_stkvar	(x,	1);
	create_insn	(x=0X402AF7);
	op_stkvar	(x,	0);
	create_insn	(x=0X402AFA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402B01);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B0C);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B11);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B14);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402B19);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402B23);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B26);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B2B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B34);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B38);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B3B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402B42);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B4D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B52);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B55);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402B5A);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402B64);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B67);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B6C);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B75);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B79);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B7C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402B83);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B8E);
	op_stkvar	(x,	1);
	create_insn	(x=0X402B93);
	op_stkvar	(x,	0);
	create_insn	(x=0X402B96);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402B9B);
	op_plain_offset	(x,	1,	0);
	op_plain_offset	(x,	129,	0);
	create_insn	(x=0X402BA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BA8);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BAD);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BB6);
	op_stkvar	(x,	1);
	create_insn	(x=0X402BBA);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BBD);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402BC4);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BD6);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BE4);
	op_stkvar	(x,	1);
	create_insn	(x=0X402BEA);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402BF1);
	op_stkvar	(x,	0);
	create_insn	(x=0X402BFC);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C0A);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C10);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C15);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C1E);
	op_stkvar	(x,	1);
	create_insn	(x=0X402C27);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_insn	(x=0X402C2E);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C39);
	op_stkvar	(x,	1);
	set_cmt	(0X402C3C,	"lpLibFileName",	0);
	create_insn	(x=0X402C42);
	op_stkvar	(x,	0);
	set_cmt	(0X402C4E,	"lpLibFileName",	0);
	set_cmt	(0X402C5C,	"lpLibFileName",	0);
	create_insn	(x=0X402C62);
	op_stkvar	(x,	0);
	set_cmt	(0X402C6B,	"lpLibFileName",	0);
	create_insn	(x=0X402C71);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C7C);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C85);
	op_stkvar	(x,	0);
	create_insn	(x=0X402C8F);
	op_stkvar	(x,	0);
	set_cmt	(0X402CA1,	"lpProcName",	0);
	set_cmt	(0X402CA7,	"hModule",	0);
	create_insn	(x=0X402CA7);
	op_stkvar	(x,	0);
	set_cmt	(0X402CAC,	"lpProcName",	0);
	create_insn	(x=0X402CB2);
	op_stkvar	(x,	0);
	set_cmt	(0X402CB8,	"hModule",	0);
	create_insn	(x=0X402CB8);
	op_stkvar	(x,	0);
	set_cmt	(0X402CBD,	"lpProcName",	0);
	create_insn	(x=0X402CC3);
	op_stkvar	(x,	0);
	set_cmt	(0X402CC9,	"hModule",	0);
	create_insn	(x=0X402CC9);
	op_stkvar	(x,	0);
	set_cmt	(0X402CCE,	"lpProcName",	0);
	create_insn	(x=0X402CD4);
	op_stkvar	(x,	0);
	set_cmt	(0X402CDA,	"hModule",	0);
	create_insn	(x=0X402CDA);
	op_stkvar	(x,	0);
	set_cmt	(0X402CDF,	"lpProcName",	0);
	create_insn	(x=0X402CE5);
	op_stkvar	(x,	0);
	set_cmt	(0X402CEB,	"hModule",	0);
	create_insn	(x=0X402CEB);
	op_stkvar	(x,	0);
	set_cmt	(0X402CF0,	"lpProcName",	0);
	create_insn	(x=0X402CF6);
	op_stkvar	(x,	0);
	set_cmt	(0X402CFC,	"hModule",	0);
	create_insn	(x=0X402CFC);
	op_stkvar	(x,	0);
	set_cmt	(0X402D01,	"lpProcName",	0);
	create_insn	(x=0X402D07);
	op_stkvar	(x,	0);
	set_cmt	(0X402D0D,	"hModule",	0);
	create_insn	(x=0X402D0D);
	op_stkvar	(x,	0);
	set_cmt	(0X402D12,	"lpProcName",	0);
	create_insn	(x=0X402D18);
	op_stkvar	(x,	0);
	set_cmt	(0X402D1E,	"hModule",	0);
	create_insn	(x=0X402D1E);
	op_stkvar	(x,	0);
	set_cmt	(0X402D23,	"lpProcName",	0);
	create_insn	(x=0X402D29);
	op_stkvar	(x,	0);
	set_cmt	(0X402D2F,	"hModule",	0);
	create_insn	(x=0X402D2F);
	op_stkvar	(x,	0);
	set_cmt	(0X402D34,	"lpProcName",	0);
	create_insn	(x=0X402D3A);
	op_stkvar	(x,	0);
	set_cmt	(0X402D40,	"hModule",	0);
	create_insn	(x=0X402D40);
	op_stkvar	(x,	0);
	set_cmt	(0X402D45,	"lpProcName",	0);
	create_insn	(x=0X402D4B);
	op_stkvar	(x,	0);
	set_cmt	(0X402D51,	"hModule",	0);
	create_insn	(x=0X402D51);
	op_stkvar	(x,	0);
	set_cmt	(0X402D56,	"lpProcName",	0);
	create_insn	(x=0X402D5C);
	op_stkvar	(x,	0);
	set_cmt	(0X402D62,	"hModule",	0);
	create_insn	(x=0X402D62);
	op_stkvar	(x,	0);
	set_cmt	(0X402D67,	"lpProcName",	0);
	create_insn	(x=0X402D6D);
	op_stkvar	(x,	0);
	set_cmt	(0X402D73,	"hModule",	0);
	create_insn	(x=0X402D73);
	op_stkvar	(x,	0);
	set_cmt	(0X402D78,	"lpProcName",	0);
	create_insn	(x=0X402D7E);
	op_stkvar	(x,	0);
	set_cmt	(0X402D84,	"hModule",	0);
	create_insn	(x=0X402D84);
	op_stkvar	(x,	0);
	set_cmt	(0X402D89,	"lpProcName",	0);
	create_insn	(x=0X402D8F);
	op_stkvar	(x,	0);
	set_cmt	(0X402D95,	"hModule",	0);
	create_insn	(x=0X402D95);
	op_stkvar	(x,	0);
	set_cmt	(0X402D9A,	"lpProcName",	0);
	create_insn	(x=0X402DA0);
	op_stkvar	(x,	0);
	set_cmt	(0X402DA6,	"hModule",	0);
	create_insn	(x=0X402DA6);
	op_stkvar	(x,	0);
	set_cmt	(0X402DAB,	"lpProcName",	0);
	create_insn	(x=0X402DB1);
	op_stkvar	(x,	0);
	set_cmt	(0X402DB7,	"hModule",	0);
	create_insn	(x=0X402DB7);
	op_stkvar	(x,	0);
	set_cmt	(0X402DBC,	"lpProcName",	0);
	create_insn	(x=0X402DC2);
	op_stkvar	(x,	0);
	set_cmt	(0X402DC8,	"hModule",	0);
	create_insn	(x=0X402DC8);
	op_stkvar	(x,	0);
	set_cmt	(0X402DCD,	"lpProcName",	0);
	create_insn	(x=0X402DD3);
	op_stkvar	(x,	0);
	set_cmt	(0X402DD9,	"hModule",	0);
	create_insn	(x=0X402DD9);
	op_stkvar	(x,	0);
	set_cmt	(0X402DDE,	"lpProcName",	0);
	create_insn	(x=0X402DE4);
	op_stkvar	(x,	0);
	set_cmt	(0X402DEA,	"hModule",	0);
	create_insn	(x=0X402DEA);
	op_stkvar	(x,	0);
	set_cmt	(0X402DEF,	"lpProcName",	0);
	create_insn	(x=0X402DF5);
	op_stkvar	(x,	0);
	set_cmt	(0X402DFB,	"hModule",	0);
	create_insn	(x=0X402DFB);
	op_stkvar	(x,	0);
	set_cmt	(0X402E00,	"lpProcName",	0);
	create_insn	(x=0X402E06);
	op_stkvar	(x,	0);
	set_cmt	(0X402E0C,	"hModule",	0);
	set_cmt	(0X402E0F,	"lpProcName",	0);
	create_insn	(x=0X402E15);
	op_stkvar	(x,	0);
	set_cmt	(0X402E1B,	"hModule",	0);
	set_cmt	(0X402E1E,	"lpProcName",	0);
	create_insn	(x=0X402E24);
	op_stkvar	(x,	0);
	set_cmt	(0X402E2A,	"hModule",	0);
	set_cmt	(0X402E2D,	"lpProcName",	0);
	create_insn	(x=0X402E33);
	op_stkvar	(x,	0);
	set_cmt	(0X402E39,	"hModule",	0);
	set_cmt	(0X402E3C,	"lpProcName",	0);
	create_insn	(x=0X402E42);
	op_stkvar	(x,	0);
	set_cmt	(0X402E48,	"hModule",	0);
	set_cmt	(0X402E4B,	"lpProcName",	0);
	create_insn	(x=0X402E51);
	op_stkvar	(x,	0);
	set_cmt	(0X402E54,	"hModule",	0);
	set_cmt	(0X402E57,	"lpProcName",	0);
	create_insn	(x=0X402E5D);
	op_stkvar	(x,	0);
	set_cmt	(0X402E60,	"hModule",	0);
	set_cmt	(0X402E63,	"lpProcName",	0);
	create_insn	(x=0X402E69);
	op_stkvar	(x,	0);
	set_cmt	(0X402E6C,	"hModule",	0);
	set_cmt	(0X402E6F,	"lpProcName",	0);
	create_insn	(x=0X402E75);
	op_stkvar	(x,	0);
	set_cmt	(0X402E78,	"hModule",	0);
	create_insn	(x=0X402E7B);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402E80,	"hModule",	0);
	create_insn	(x=0X402E81);
	op_stkvar	(x,	0);
	create_insn	(x=0X402E86);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402E8B,	"hModule",	0);
	create_insn	(x=0X402E8C);
	op_stkvar	(x,	0);
	create_insn	(x=0X402E91);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402E96,	"hModule",	0);
	create_insn	(x=0X402E97);
	op_stkvar	(x,	0);
	create_insn	(x=0X402E9C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_cmt	(0X402EA1,	"hModule",	0);
	create_insn	(x=0X402EA2);
	op_stkvar	(x,	0);
	set_cmt	(0X402EA7,	"lpProcName",	0);
	create_insn	(x=0X402EAD);
	op_stkvar	(x,	1);
	create_insn	(x=0X402EB0);
	op_stkvar	(x,	0);
	set_cmt	(0X402EB3,	"hModule",	0);
	set_cmt	(0X402EB6,	"lpProcName",	0);
	create_insn	(x=0X402EBC);
	op_stkvar	(x,	0);
	set_cmt	(0X402EBF,	"hModule",	0);
	set_cmt	(0X402EC2,	"lpProcName",	0);
	create_insn	(x=0X402EC8);
	op_stkvar	(x,	0);
	set_cmt	(0X402ECB,	"hModule",	0);
	set_cmt	(0X402ECE,	"lpProcName",	0);
	create_insn	(x=0X402ED4);
	op_stkvar	(x,	0);
	set_cmt	(0X402ED7,	"hModule",	0);
	set_cmt	(0X402EDA,	"lpProcName",	0);
	create_insn	(x=0X402EE0);
	op_stkvar	(x,	0);
	set_cmt	(0X402EE3,	"hModule",	0);
	create_insn	(x=0X402EE3);
	op_stkvar	(x,	0);
	set_cmt	(0X402EE8,	"lpProcName",	0);
	create_insn	(x=0X402EEE);
	op_stkvar	(x,	1);
	create_insn	(x=0X402EF1);
	op_stkvar	(x,	0);
	set_cmt	(0X402EF4,	"hModule",	0);
	create_insn	(x=0X402EF7);
	op_stkvar	(x,	0);
	set_cmt	(0X402EFA,	"lpProcName",	0);
	set_cmt	(0X402F00,	"hModule",	0);
	set_cmt	(0X402F03,	"lpProcName",	0);
	create_insn	(x=0X402F09);
	op_stkvar	(x,	0);
	set_cmt	(0X402F0C,	"hModule",	0);
	set_cmt	(0X402F0F,	"lpProcName",	0);
	create_insn	(x=0X402F15);
	op_stkvar	(x,	0);
	set_cmt	(0X402F18,	"hModule",	0);
	set_cmt	(0X402F1B,	"lpProcName",	0);
	create_insn	(x=0X402F21);
	op_stkvar	(x,	0);
	set_cmt	(0X402F24,	"hModule",	0);
	create_insn	(x=0X402F32);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F35);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F38);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F3D);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F46);
	op_stkvar	(x,	1);
	create_insn	(x=0X402F4A);
	op_stkvar	(x,	1);
	create_insn	(x=0X402F53);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F56);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F61);
	op_stkvar	(x,	1);
	create_insn	(x=0X402F6B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F71);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F74);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F7D);
	op_stkvar	(x,	1);
	create_insn	(x=0X402F81);
	op_stkvar	(x,	1);
	create_insn	(x=0X402F88);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F8B);
	op_stkvar	(x,	0);
	create_insn	(x=0X402F9A);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FA2);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FA5);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FAE);
	op_stkvar	(x,	1);
	create_insn	(x=0X402FB2);
	op_stkvar	(x,	1);
	create_insn	(x=0X402FBB);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FBE);
	op_stkvar	(x,	0);
	set_cmt	(0X402FC5,	"lpProcName",	0);
	set_cmt	(0X402FCB,	"hModule",	0);
	create_insn	(x=0X402FCB);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FD0);
	op_stkvar	(x,	1);
	create_insn	(x=0X402FDB);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FE0);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FE9);
	op_stkvar	(x,	0);
	create_insn	(x=0X402FEC);
	op_stkvar	(x,	0);
	set_cmt	(0X402FF2,	"uExitCode",	0);
	create_insn	(x=0X402FFA);
	op_stkvar	(x,	1);
	create_insn	(x=0X402FFE);
	op_stkvar	(x,	0);
	set_cmt	(0X403004,	"uExitCode",	0);
	create_insn	(0X40300C);
	create_insn	(0X403013);
	set_name	(0X403013,	"nullsub_1");
	make_array	(0X403014,	0X1EC);
	create_dword	(0X403200);
	make_array	(0X403200,	0X380);
	update_extra_cmt		(0X404000,	E_PREV + 0,	"; Section 2. (virtual address 00004000)");
	update_extra_cmt		(0X404000,	E_PREV + 1,	"; Virtual size                  : 00000166 (    358.)");
	update_extra_cmt		(0X404000,	E_PREV + 2,	"; Section size in file          : 00000200 (    512.)");
	update_extra_cmt		(0X404000,	E_PREV + 3,	"; Offset to raw data for section: 00002600");
	update_extra_cmt		(0X404000,	E_PREV + 4,	"; Flags 40000040: Data Readable");
	update_extra_cmt		(0X404000,	E_PREV + 5,	"; Alignment     : default");
	update_extra_cmt		(0X404000,	E_PREV + 6,	"; ");
	update_extra_cmt		(0X404000,	E_PREV + 7,	"; Imports from ADVAPI32.dll");
	update_extra_cmt		(0X404000,	E_PREV + 8,	"; ");
	create_dword	(x=0X404000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404000,	"LookupPrivilegeValueA");
	create_dword	(x=0X404004);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404004,	"AdjustTokenPrivileges");
	create_dword	(x=0X404008);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404008,	"OpenProcessToken");
	create_byte	(0X40400C);
	make_array	(0X40400C,	0X4);
	update_extra_cmt		(0X404010,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X404010,	E_PREV + 1,	"; Imports from KERNEL32.dll");
	update_extra_cmt		(0X404010,	E_PREV + 2,	"; ");
	create_dword	(x=0X404010);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404010,	"ExitProcess");
	create_dword	(x=0X404014);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404014,	"LoadLibraryA");
	create_dword	(x=0X404018);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404018,	"lstrlenA");
	create_dword	(x=0X40401C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X40401C,	"GetCurrentProcess");
	create_dword	(x=0X404020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404020,	"GetProcAddress");
	create_dword	(x=0X404024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404024,	"lstrcmpiA");
	create_dword	(x=0X404028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X404028,	"CloseHandle");
	create_byte	(0X40402C);
	make_array	(0X40402C,	0X4);
	set_cmt	(0X404030,	"Import Name Table",	0);
	create_dword	(x=0X404030);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	set_name	(0X404030,	"__IMPORT_DESCRIPTOR_KERNEL32");
	set_cmt	(0X404034,	"Time stamp",	0);
	create_dword	(0X404034);
	set_cmt	(0X404038,	"Forwarder Chain",	0);
	create_dword	(0X404038);
	set_cmt	(0X40403C,	"DLL Name",	0);
	create_dword	(x=0X40403C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	set_cmt	(0X404040,	"Import Address Table",	0);
	create_dword	(x=0X404040);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	set_cmt	(0X404044,	"Import Name Table",	0);
	create_dword	(x=0X404044);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	set_name	(0X404044,	"__IMPORT_DESCRIPTOR_ADVAPI32");
	set_cmt	(0X404048,	"Time stamp",	0);
	create_dword	(0X404048);
	set_cmt	(0X40404C,	"Forwarder Chain",	0);
	create_dword	(0X40404C);
	set_cmt	(0X404050,	"DLL Name",	0);
	create_dword	(x=0X404050);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	set_cmt	(0X404054,	"Import Address Table",	0);
	create_dword	(x=0X404054);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	update_extra_cmt		(0X40406C,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X40406C,	E_PREV + 1,	"; Import names for ADVAPI32.dll");
	update_extra_cmt		(0X40406C,	E_PREV + 2,	"; ");
	create_dword	(x=0X40406C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404070);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404074);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(0X404078);
	update_extra_cmt		(0X40407C,	E_PREV + 0,	"; ");
	update_extra_cmt		(0X40407C,	E_PREV + 1,	"; Import names for KERNEL32.dll");
	update_extra_cmt		(0X40407C,	E_PREV + 2,	"; ");
	create_dword	(x=0X40407C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404080);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404084);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404088);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X40408C);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404090);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(x=0X404094);
	op_offset		(x,	0,	0X12,	0XFFFFFFFF,	0X400000,	0);
	op_offset		(x,	128,	0X12,	0XFFFFFFFF,	0X400000,	0);
	create_dword	(0X404098);
	create_word	(0X40409C);
	create_strlit	(0X40409E,	0XC);
	create_word	(0X4040AA);
	create_strlit	(0X4040AC,	0X12);
	create_word	(0X4040BE);
	create_strlit	(0X4040C0,	0X9);
	create_word	(0X4040CA);
	create_strlit	(0X4040CC,	0XC);
	create_word	(0X4040D8);
	create_strlit	(0X4040DA,	0XA);
	create_word	(0X4040E4);
	create_strlit	(0X4040E6,	0XF);
	create_word	(0X4040F6);
	create_strlit	(0X4040F8,	0XD);
	create_strlit	(0X404106,	0XD);
	set_name	(0X404106,	"aKernel32Dll");
	create_word	(0X404114);
	create_strlit	(0X404116,	0X16);
	create_word	(0X40412C);
	create_strlit	(0X40412E,	0X16);
	create_word	(0X404144);
	create_strlit	(0X404146,	0X11);
	create_strlit	(0X404158,	0XD);
	set_name	(0X404158,	"aAdvapi32Dll");
	make_array	(0X404165,	0XE9B);
	update_extra_cmt		(0X405000,	E_PREV + 0,	"; Section 3. (virtual address 00005000)");
	update_extra_cmt		(0X405000,	E_PREV + 1,	"; Virtual size                  : 00000ACB (   2763.)");
	update_extra_cmt		(0X405000,	E_PREV + 2,	"; Section size in file          : 00000C00 (   3072.)");
	update_extra_cmt		(0X405000,	E_PREV + 3,	"; Offset to raw data for section: 00002800");
	update_extra_cmt		(0X405000,	E_PREV + 4,	"; Flags C0000040: Data Readable Writable");
	update_extra_cmt		(0X405000,	E_PREV + 5,	"; Alignment     : default");
	create_dword	(x=0X405000);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X405000,	"str_tbl2_off_405000");
	create_dword	(x=0X405020);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X405020,	"lpLibFileName");
	create_dword	(x=0X405024);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405028);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40502C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405030);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405034);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X405034,	"lpProcName");
	create_dword	(x=0X405038);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40503C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405040);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405044);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405048);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40504C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405050);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405054);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405058);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40505C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405060);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405064);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405068);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40506C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405070);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405074);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405078);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40507C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405080);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405084);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405088);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40508C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405090);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405094);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X405098);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X40509C);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050A0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050A4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050A8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050AC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050B0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050B4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050B8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050BC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050C0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050C4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050C8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050CC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050D0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050D4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050D8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050DC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050E0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050E4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050E8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050EC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050F4);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050F8);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_dword	(x=0X4050FC);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X4050FC,	"lpString2");
	create_dword	(x=0X405108);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	set_name	(0X405108,	"lpString");
	create_dword	(x=0X4052F0);
	op_plain_offset	(x,	0,	0);
	op_plain_offset	(x,	128,	0);
	create_strlit	(0X405300,	0X4D);
	make_array	(0X40534D,	0X3);
	create_strlit	(0X405350,	0X36);
	make_array	(0X405386,	0X2);
	create_strlit	(0X405388,	0X1A);
	set_name	(0X405388,	"aIAmNowFarFarAw");
	make_array	(0X4053A2,	0X2);
	create_strlit	(0X4053A4,	0XD);
	set_name	(0X4053A4,	"aKernel32Dll_0");
	create_strlit	(0X4053B4,	0XB);
	set_name	(0X4053B4,	"aWs232Dll");
	create_strlit	(0X4053C0,	0XC);
	set_name	(0X4053C0,	"aWininetDll");
	create_strlit	(0X4053CC,	0XC);
	set_name	(0X4053CC,	"aShell32Dll");
	create_strlit	(0X4053D8,	0XD);
	set_name	(0X4053D8,	"aAdvapi32Dll_0");
	create_strlit	(0X4053E8,	0X19);
	set_name	(0X4053E8,	"aCreatetoolhelp");
	create_strlit	(0X405404,	0XF);
	set_name	(0X405404,	"aProcess32first");
	create_strlit	(0X405414,	0XE);
	set_name	(0X405414,	"aProcess32next");
	create_strlit	(0X405424,	0XC);
	set_name	(0X405424,	"aOpenprocess");
	create_strlit	(0X405430,	0X13);
	set_name	(0X405430,	"aGetmodulefilen");
	create_strlit	(0X405444,	0XF);
	set_name	(0X405444,	"aVirtualallocex");
	create_strlit	(0X405454,	0X15);
	set_name	(0X405454,	"aZwwritevirtual");
	create_strlit	(0X40546C,	0X13);
	set_name	(0X40546C,	"aCreateremoteth");
	create_strlit	(0X405480,	0X14);
	set_name	(0X405480,	"aWaitforsingleo");
	create_strlit	(0X405494,	0XD);
	set_name	(0X405494,	"aCreatemutexa");
	make_array	(0X4054A1,	0X3);
	create_strlit	(0X4054A4,	0XD);
	set_name	(0X4054A4,	"aCreatethread");
	make_array	(0X4054B1,	0X3);
	create_strlit	(0X4054B4,	0XB);
	set_name	(0X4054B4,	"aExitthread");
	create_strlit	(0X4054C0,	0X6);
	set_name	(0X4054C0,	"aSleep");
	make_array	(0X4054C6,	0X2);
	create_strlit	(0X4054C8,	0XD);
	set_name	(0X4054C8,	"aGettickcount");
	make_array	(0X4054D5,	0X3);
	create_strlit	(0X4054D8,	0XC);
	set_name	(0X4054D8,	"aCreatefilea");
	create_strlit	(0X4054E4,	0XA);
	set_name	(0X4054E4,	"aWritefile");
	create_strlit	(0X4054F0,	0XC);
	set_name	(0X4054F0,	"aClosehandle");
	create_strlit	(0X4054FC,	0XF);
	set_name	(0X4054FC,	"aCreateprocessa");
	create_strlit	(0X40550C,	0X18);
	set_name	(0X40550C,	"aGetlogicaldriv");
	create_strlit	(0X405524,	0XE);
	set_name	(0X405524,	"aGetdrivetypea");
	make_array	(0X405532,	0X2);
	create_strlit	(0X405534,	0X11);
	set_name	(0X405534,	"aCreatedirector");
	make_array	(0X405545,	0X3);
	create_strlit	(0X405548,	0XD);
	set_name	(0X405548,	"aGetlasterror");
	make_array	(0X405555,	0X3);
	create_strlit	(0X405558,	0X13);
	set_name	(0X405558,	"aSetfileattribu");
	create_strlit	(0X40556C,	0XA);
	set_name	(0X40556C,	"aCopyfilea");
	make_array	(0X405576,	0X2);
	create_strlit	(0X405578,	0XC);
	set_name	(0X405578,	"aDeletefilea");
	create_strlit	(0X405584,	0X8);
	set_name	(0X405584,	"aLstrlen");
	create_strlit	(0X40558C,	0X8);
	set_name	(0X40558C,	"aLstrcat");
	create_strlit	(0X405594,	0X8);
	set_name	(0X405594,	"aLstrcmp");
	create_strlit	(0X40559C,	0X9);
	set_name	(0X40559C,	"aLstrcmpi");
	make_array	(0X4055A5,	0X3);
	create_strlit	(0X4055A8,	0X9);
	set_name	(0X4055A8,	"aLstrcpyn");
	make_array	(0X4055B1,	0X3);
	create_strlit	(0X4055B4,	0XB);
	set_name	(0X4055B4,	"aWsastartup");
	create_strlit	(0X4055C0,	0X7);
	set_name	(0X4055C0,	"aSocket");
	create_strlit	(0X4055C8,	0X8);
	set_name	(0X4055C8,	"aConnect");
	create_strlit	(0X4055D0,	0XA);
	set_name	(0X4055D0,	"aInetAddr");
	create_strlit	(0X4055DC,	0X6);
	set_name	(0X4055DC,	"aHtons");
	make_array	(0X4055E2,	0X2);
	create_strlit	(0X4055E4,	0X5);
	set_name	(0X4055E4,	"aSend");
	make_array	(0X4055E9,	0X3);
	create_strlit	(0X4055EC,	0X5);
	set_name	(0X4055EC,	"aRecv");
	make_array	(0X4055F1,	0X3);
	create_strlit	(0X4055F4,	0XC);
	set_name	(0X4055F4,	"aClosesocket");
	create_strlit	(0X405600,	0XE);
	set_name	(0X405600,	"aGethostbyname");
	make_array	(0X40560E,	0X2);
	create_strlit	(0X405610,	0XE);
	set_name	(0X405610,	"aInternetopena");
	make_array	(0X40561E,	0X2);
	create_strlit	(0X405620,	0X11);
	set_name	(0X405620,	"aInternetopenur");
	make_array	(0X405631,	0X3);
	create_strlit	(0X405634,	0X14);
	set_name	(0X405634,	"aInternetcloseh");
	create_strlit	(0X405648,	0X11);
	set_name	(0X405648,	"aInternetreadfi");
	make_array	(0X405659,	0X3);
	create_strlit	(0X40565C,	0XE);
	set_name	(0X40565C,	"aShellexecutea");
	make_array	(0X40566A,	0X2);
	create_strlit	(0X40566C,	0X10);
	set_name	(0X40566C,	"aRegcreatekeyex");
	create_strlit	(0X40567C,	0XF);
	set_name	(0X40567C,	"aRegsetvalueexa");
	create_strlit	(0X40568C,	0XC);
	set_name	(0X40568C,	"aRegclosekey");
	create_strlit	(0X405698,	0XE);
	set_name	(0X405698,	"aRegdeletekeya");
	make_array	(0X4056A6,	0X2);
	create_strlit	(0X4056A8,	0X10);
	set_name	(0X4056A8,	"aRegdeletevalue");
	create_strlit	(0X4056B8,	0XA);
	set_name	(0X4056B8,	"aNtdllDll");
	make_array	(0X4056C2,	0X2);
	create_strlit	(0X4056C4,	0XD);
	set_name	(0X4056C4,	"aExplorerExe");
	make_array	(0X4056D1,	0X3);
	create_strlit	(0X4056D4,	0X10);
	set_name	(0X4056D4,	"aI0l0v3y0u0v1ru");
	create_strlit	(0X4056E4,	0XB);
	set_name	(0X4056E4,	"aYellowExe");
	create_strlit	(0X4056F0,	0X9);
	set_name	(0X4056F0,	"aTb654");
	make_array	(0X4056F9,	0X3);
	create_strlit	(0X4056FC,	0X26);
	set_name	(0X4056FC,	"a35tbc5c04fub31");
	make_array	(0X405722,	0X2);
	create_strlit	(0X405A78,	0X16);
	set_name	(0X405A78,	"aAndAllISeeIsYo");
	make_array	(0X405A8E,	0X2);
	create_strlit	(0X405A90,	0X11);
	set_name	(0X405A90,	"Name");
	make_array	(0X405AA1,	0X3);
	create_strlit	(0X405AA4,	0X7);
	set_name	(0X405AA4,	"ProcName");
	create_strlit	(0X405AAC,	0XB);
	set_name	(0X405AAC,	"aWsasocketa");
	create_strlit	(0X405AB8,	0X6);
	set_name	(0X405AB8,	"aHtonl");
	make_array	(0X405ABE,	0X2);
	create_strlit	(0X405AC0,	0XB);
	set_name	(0X405AC0,	"aSetsockopt");
	make_array	(0X405ACB,	0X535);
}

static Functions_0(void) {

	add_func    (0X401000,0X4014CB);
	set_func_flags(0X401000,0x5410);
	SetType(0X401000, "int __stdcall sub_401000(struct InjectParam *a1);");
	set_frame_size(0X401000, 0X3B4, 4, 0X4);
	add_func    (0X4014CB,0X4014D6);
	set_func_flags(0X4014CB,0x5400);
	set_frame_size(0X4014CB, 0, 0, 0);
	add_func    (0X4014D6,0X40155D);
	set_func_flags(0X4014D6,0x5400);
	set_frame_size(0X4014D6, 0X10, 0, 0);
	add_func    (0X40155D,0X4015C3);
	set_func_flags(0X40155D,0x5410);
	set_frame_size(0X40155D, 0X18, 4, 0);
	add_func    (0X4015C3,0X4015EE);
	set_func_flags(0X4015C3,0x5400);
	set_frame_size(0X4015C3, 0X4, 0, 0);
	add_func    (0X4015EE,0X401762);
	set_func_flags(0X4015EE,0x5410);
	set_frame_size(0X4015EE, 0X20C, 4, 0);
	add_func    (0X401762,0X4017F5);
	set_func_flags(0X401762,0x5410);
	set_frame_size(0X401762, 0X40C, 4, 0);
	add_func    (0X4017F5,0X401A08);
	set_func_flags(0X4017F5,0x5410);
	set_frame_size(0X4017F5, 0X22C, 4, 0);
	add_func    (0X401A08,0X401A58);
	set_func_flags(0X401A08,0x5400);
	set_frame_size(0X401A08, 0XC, 0, 0);
	add_func    (0X401A58,0X401A81);
	set_func_flags(0X401A58,0x5400);
	set_frame_size(0X401A58, 0, 0, 0);
	add_func    (0X401A81,0X401AA3);
	set_func_flags(0X401A81,0x5400);
	set_frame_size(0X401A81, 0, 0, 0);
	add_func    (0X401AA3,0X401B44);
	set_func_flags(0X401AA3,0x5410);
	set_frame_size(0X401AA3, 0X8C, 4, 0);
	add_func    (0X401B44,0X401DD3);
	set_func_flags(0X401B44,0x5410);
	set_frame_size(0X401B44, 0X20C, 4, 0);
	add_func    (0X401DD3,0X401E0F);
	set_func_flags(0X401DD3,0x5400);
	set_frame_size(0X401DD3, 0X4, 0, 0);
	add_func    (0X401E0F,0X401E42);
	set_func_flags(0X401E0F,0x5410);
	set_frame_size(0X401E0F, 0, 4, 0);
	add_func    (0X401E42,0X402047);
	set_func_flags(0X401E42,0x5410);
	set_frame_size(0X401E42, 0X270, 4, 0X4);
	add_func    (0X402047,0X402081);
	set_func_flags(0X402047,0x5400);
	set_frame_size(0X402047, 0X4, 0, 0);
	add_func    (0X402081,0X402219);
	set_func_flags(0X402081,0x1411);
	set_frame_size(0X402081, 0X410, 4, 0);
	add_func    (0X402219,0X402535);
	set_func_flags(0X402219,0x5410);
	set_frame_size(0X402219, 0X410, 4, 0);
	add_func    (0X402535,0X40272F);
	set_func_flags(0X402535,0x1411);
	set_frame_size(0X402535, 0X110, 4, 0);
	add_func    (0X40272F,0X402765);
	set_func_flags(0X40272F,0x5400);
	set_frame_size(0X40272F, 0XC, 0, 0);
	add_func    (0X402765,0X402781);
	set_func_flags(0X402765,0x5400);
	set_frame_size(0X402765, 0, 0, 0);
	add_func    (0X402781,0X4027E1);
	set_func_flags(0X402781,0x5410);
	SetType(0X402781, "int __cdecl mw_enable_privileges(LPCSTR lpName);");
	set_frame_size(0X402781, 0X14, 4, 0);
	define_local_var(0X402781, 0X4027E1, "[bp-0X14]", "NewState");
	define_local_var(0X402781, 0X4027E1, "[bp-0X4]", "TokenHandle");
	define_local_var(0X402781, 0X4027E1, "[bp+0X8]", "lpName");
	add_func    (0X4027E1,0X402848);
	set_func_flags(0X4027E1,0x5400);
	SetType(0X4027E1, "int __cdecl mw_decrypt_str(LPCSTR lpString);");
	set_frame_size(0X4027E1, 0, 0, 0);
	define_local_var(0X4027E1, 0X402848, "[bp+0X4]", "lpString");
	add_func    (0X402848,0X403013);
	set_func_flags(0X402848,0x5410);
	set_frame_size(0X402848, 0X5E8, 4, 0);
	define_local_var(0X402848, 0X403013, "[bp-0X1F0]", "String1");
	define_local_var(0X402848, 0X403013, "[bp-0XE8]", "WaitForSingleObject");
	add_func    (0X403013,0X403014);
	set_func_flags(0X403013,0x5440);
	set_frame_size(0X403013, 0, 0, 0);
}

//------------------------------------------------------------------------
// Information about functions

static Functions(void) {

	Functions_0();
}

//------------------------------------------------------------------------
// Information about segment registers

static SegRegs(void) {
	split_sreg_range(0X401000,"es",0,3);
	split_sreg_range(0X404000,"es",0,3);
	split_sreg_range(0X404030,"es",0,3);
	split_sreg_range(0X405000,"es",0,3);
	split_sreg_range(0X401000,"ss",0,3);
	split_sreg_range(0X404000,"ss",0,3);
	split_sreg_range(0X404030,"ss",0,3);
	split_sreg_range(0X405000,"ss",0,3);
	split_sreg_range(0X401000,"ds",0X3,3);
	split_sreg_range(0X402848,"ds",0X3,3);
	split_sreg_range(0X404000,"ds",0X3,3);
	split_sreg_range(0X404030,"ds",0X3,3);
	split_sreg_range(0X405000,"ds",0X3,3);
	split_sreg_range(0X401000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X404000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X404030,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X405000,"fs",0XFFFFFFFF,3);
	split_sreg_range(0X401000,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X404000,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X404030,"gs",0XFFFFFFFF,3);
	split_sreg_range(0X405000,"gs",0XFFFFFFFF,3);
}

//------------------------------------------------------------------------
// Information about all patched bytes:

static Patches(void) {
}

//------------------------------------------------------------------------
// Call all byte feature functions:

static Bytes(void) {
	Bytes_0();
        end_type_updating(UTP_STRUCT);
}

// End of file.
